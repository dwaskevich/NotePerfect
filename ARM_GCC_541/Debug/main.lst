ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PWM_Lookup
  20              		.data
  21              		.align	2
  22              		.type	PWM_Lookup, %object
  23              		.size	PWM_Lookup, 122
  24              	PWM_Lookup:
  25 0000 0000     		.short	0
  26 0002 5300     		.short	83
  27 0004 A700     		.short	167
  28 0006 FA00     		.short	250
  29 0008 4D01     		.short	333
  30 000a A101     		.short	417
  31 000c F401     		.short	500
  32 000e 4702     		.short	583
  33 0010 9B02     		.short	667
  34 0012 EE02     		.short	750
  35 0014 4103     		.short	833
  36 0016 9503     		.short	917
  37 0018 E803     		.short	1000
  38 001a 3B04     		.short	1083
  39 001c 8F04     		.short	1167
  40 001e E204     		.short	1250
  41 0020 3505     		.short	1333
  42 0022 8905     		.short	1417
  43 0024 DC05     		.short	1500
  44 0026 2F06     		.short	1583
  45 0028 8306     		.short	1667
  46 002a D606     		.short	1750
  47 002c 2907     		.short	1833
  48 002e 7D07     		.short	1917
  49 0030 D007     		.short	2000
  50 0032 2308     		.short	2083
  51 0034 7708     		.short	2167
  52 0036 CA08     		.short	2250
  53 0038 1D09     		.short	2333
  54 003a 7109     		.short	2417
  55 003c C409     		.short	2500
  56 003e 170A     		.short	2583
  57 0040 6B0A     		.short	2667
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 2


  58 0042 BE0A     		.short	2750
  59 0044 110B     		.short	2833
  60 0046 650B     		.short	2917
  61 0048 B80B     		.short	3000
  62 004a 0B0C     		.short	3083
  63 004c 5F0C     		.short	3167
  64 004e B20C     		.short	3250
  65 0050 050D     		.short	3333
  66 0052 590D     		.short	3417
  67 0054 AC0D     		.short	3500
  68 0056 FF0D     		.short	3583
  69 0058 530E     		.short	3667
  70 005a A60E     		.short	3750
  71 005c F90E     		.short	3833
  72 005e 4D0F     		.short	3917
  73 0060 A00F     		.short	4000
  74 0062 F30F     		.short	4083
  75 0064 4710     		.short	4167
  76 0066 9A10     		.short	4250
  77 0068 ED10     		.short	4333
  78 006a 4111     		.short	4417
  79 006c 9411     		.short	4500
  80 006e E711     		.short	4583
  81 0070 3B12     		.short	4667
  82 0072 8E12     		.short	4750
  83 0074 E112     		.short	4833
  84 0076 3513     		.short	4917
  85 0078 8813     		.short	5000
  86              		.section	.rodata
  87              		.align	2
  88              	.LC0:
  89 0000 506F7420 		.ascii	"Pot      Step=\000"
  89      20202020 
  89      20537465 
  89      703D00
  90 000f 00       		.align	2
  91              	.LC1:
  92 0010 4441433D 		.ascii	"DAC=\000"
  92      00
  93 0015 000000   		.align	2
  94              	.LC2:
  95 0018 506F7400 		.ascii	"Pot\000"
  96              		.align	2
  97              	.LC3:
  98 001c 43562000 		.ascii	"CV \000"
  99              		.align	2
 100              	.LC4:
 101 0020 25346400 		.ascii	"%4d\000"
 102              		.align	2
 103              	.LC5:
 104 0024 25326C64 		.ascii	"%2ld\000"
 104      00
 105 0029 000000   		.align	2
 106              	.LC6:
 107 002c 25346C64 		.ascii	"%4ld\000"
 107      00
 108              		.section	.text.main,"ax",%progbits
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 3


 109              		.align	2
 110              		.global	main
 111              		.thumb
 112              		.thumb_func
 113              		.type	main, %function
 114              	main:
 115              	.LFB64:
 116              		.file 1 "main.c"
   1:main.c        **** ï»¿/******************************************************************************
   2:main.c        **** * File Name: Main.c
   3:main.c        **** *
   4:main.c        **** * Version 1.1
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** * This file contains the main function for the voltage Display test.
   8:main.c        **** *
   9:main.c        **** * Note:
  10:main.c        **** *
  11:main.c        **** * Code tested with:
  12:main.c        **** * PSoC Creator: 3.0
  13:main.c        **** * Device Tested With: CY8C5868AXI-LP035
  14:main.c        **** * Compiler    : ARMGCC 4.4.1, ARM RVDS Generic, ARM MDK Generic
  15:main.c        **** *
  16:main.c        **** ********************************************************************************
  17:main.c        **** * Copyright (2013), Cypress Semiconductor Corporation. All Rights Reserved.
  18:main.c        **** ********************************************************************************
  19:main.c        **** * This software is owned by Cypress Semiconductor Corporation (Cypress)
  20:main.c        **** * and is protected by and subject to worldwide patent protection (United
  21:main.c        **** * States and foreign), United States copyright laws and international treaty
  22:main.c        **** * provisions. Cypress hereby grants to licensee a personal, non-exclusive,
  23:main.c        **** * non-transferable license to copy, use, modify, create derivative works of,
  24:main.c        **** * and compile the Cypress Source Code and derivative works for the sole
  25:main.c        **** * purpose of creating custom software in support of licensee product to be
  26:main.c        **** * used only in conjunction with a Cypress integrated circuit as specified in
  27:main.c        **** * the applicable agreement. Any reproduction, modification, translation,
  28:main.c        **** * compilation, or representation of this software except as specified above 
  29:main.c        **** * is prohibited without the express written permission of Cypress.
  30:main.c        **** *
  31:main.c        **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
  32:main.c        **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  33:main.c        **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  34:main.c        **** * Cypress reserves the right to make changes without further notice to the 
  35:main.c        **** * materials described herein. Cypress does not assume any liability arising out 
  36:main.c        **** * of the application or use of any product or circuit described herein. Cypress 
  37:main.c        **** * does not authorize its products for use as critical components in life-support 
  38:main.c        **** * systems where a malfunction or failure may reasonably be expected to result in 
  39:main.c        **** * significant injury to the user. The inclusion of Cypress' product in a life-
  40:main.c        **** * support systems application implies that the manufacturer assumes all risk of 
  41:main.c        **** * such use and in doing so indemnifies Cypress against all charges. 
  42:main.c        **** *
  43:main.c        **** * Use of this Software may be limited by and subject to the applicable Cypress
  44:main.c        **** * software license agreement. 
  45:main.c        **** *******************************************************************************/
  46:main.c        **** 
  47:main.c        **** /******************************************************************************
  48:main.c        **** *                           THEORY OF OPERATION
  49:main.c        **** * This project demonstrates how ADC is used to read the input voltage at 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 4


  50:main.c        **** * it's input and display it on the LCD.
  51:main.c        **** * 
  52:main.c        **** * The Potentiometer is connected to the input of the DelSig ADC. ADC is 
  53:main.c        **** * configured with 20 bit of resolution to measure the input voltage with 
  54:main.c        **** * higher accuracy. Moving average filter of 128 samples is applied to the ADC
  55:main.c        **** * conversion result before displaying the result in micro volts on the LCD. 
  56:main.c        **** *
  57:main.c        **** * Hardware connection on the Kit
  58:main.c        **** * Potentiometer - PORT 6[5] 
  59:main.c        **** * LCD - PORT 2[0..6]
  60:main.c        **** *******************************************************************************/
  61:main.c        **** #include <device.h>
  62:main.c        **** #include "stdio.h"
  63:main.c        **** #include "stdlib.h"
  64:main.c        **** 
  65:main.c        **** #define POT (0u)
  66:main.c        **** #define CV  (1u)
  67:main.c        **** 
  68:main.c        **** /* Number of samples to be taken before averaging the ADC value */
  69:main.c        **** #define MAX_SAMPLE                  ((uint8)128)
  70:main.c        **** 
  71:main.c        **** /* Threshold value to reset the filter for sharp change in signal */
  72:main.c        **** #define SIGNAL_SLOPE                1000
  73:main.c        **** 
  74:main.c        **** /* Number of shifts for calculating the sum and average of MAX_SAMPLE */
  75:main.c        **** #define DIV                         7
  76:main.c        **** 
  77:main.c        **** /* Number of "NotePerfect" control voltages per volt */
  78:main.c        **** #define NUMBER_NOTES_PER_VOLT       (12u)
  79:main.c        **** 
  80:main.c        **** /* Maximum control voltage */
  81:main.c        **** #define MAX_CONTROL_VOLTAGE         (5u)
  82:main.c        **** 
  83:main.c        **** /* Total number of "NotePerfect" quantized steps/values (60) */
  84:main.c        **** #define NUMBER_NOTE_PERFECT_STEPS (NUMBER_NOTES_PER_VOLT * MAX_CONTROL_VOLTAGE)
  85:main.c        **** 
  86:main.c        **** /* NotePerfect step size (in mV) */
  87:main.c        **** #define NOTEPERFECT_STEP_SIZE_MV    ((MAX_CONTROL_VOLTAGE * 1000) / NUMBER_NOTE_PERFECT_STEPS)
  88:main.c        **** 
  89:main.c        **** /* NotePerfect step number lookup table */
  90:main.c        **** uint16_t PWM_Lookup[] = {0, 83, 167, 250, 333, 417, 500, 583, 667, 750, 833, 917, 1000,
  91:main.c        ****                             1083, 1167, 1250, 1333, 1417, 1500, 1583, 1667, 1750, 1833, 1917, 2000,
  92:main.c        ****                             2083, 2167, 2250, 2333, 2417, 2500, 2583, 2667, 2750, 2833, 2917, 3000,
  93:main.c        ****                             3083, 3167, 3250, 3333, 3417, 3500, 3583, 3667, 3750, 3833, 3917, 4000,
  94:main.c        ****                             4083, 4167, 4250, 4333, 4417, 4500, 4583, 4667, 4750, 4833, 4917, 5000}
  95:main.c        **** 
  96:main.c        **** int main(void)
  97:main.c        **** {
 117              		.loc 1 97 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 576
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121 0000 80B5     		push	{r7, lr}
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 7, -8
 124              		.cfi_offset 14, -4
 125 0002 ADF5107D 		sub	sp, sp, #576
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 5


 126              		.cfi_def_cfa_offset 584
 127 0006 00AF     		add	r7, sp, #0
 128              		.cfi_def_cfa_register 7
  98:main.c        ****     uint8 i;
  99:main.c        ****     
 100:main.c        ****     /* Array to store ADC count for moving average filter */
 101:main.c        ****     int32 adcCounts[MAX_SAMPLE] = {0};
 129              		.loc 1 101 0
 130 0008 07F11403 		add	r3, r7, #20
 131 000c 1846     		mov	r0, r3
 132 000e 4FF40073 		mov	r3, #512
 133 0012 1A46     		mov	r2, r3
 134 0014 0021     		movs	r1, #0
 135 0016 FFF7FEFF 		bl	memset
 102:main.c        ****     
 103:main.c        ****     /* Variable to hold ADC conversion result */
 104:main.c        ****     int32 result = 0;
 136              		.loc 1 104 0
 137 001a 0023     		movs	r3, #0
 138 001c C7F82032 		str	r3, [r7, #544]
 105:main.c        ****     
 106:main.c        ****     /* Variable to store accumulated sample for filter array */
 107:main.c        ****     int32 sum = 0;
 139              		.loc 1 107 0
 140 0020 0023     		movs	r3, #0
 141 0022 C7F83832 		str	r3, [r7, #568]
 108:main.c        ****     
 109:main.c        ****     /* Variable for testing sharp change in signal slope */
 110:main.c        ****     int16 diff = 0;
 142              		.loc 1 110 0
 143 0026 0023     		movs	r3, #0
 144 0028 A7F81E32 		strh	r3, [r7, #542]	@ movhi
 111:main.c        ****     
 112:main.c        ****     /* Variable to hold the result in milli volts converted from filtered 
 113:main.c        ****      * ADC counts */
 114:main.c        ****     int32 milliVolts = 0;
 145              		.loc 1 114 0
 146 002c 0023     		movs	r3, #0
 147 002e C7F81832 		str	r3, [r7, #536]
 115:main.c        **** 	
 116:main.c        ****     /* Variable to hold the moving average filtered value */
 117:main.c        ****     int32 averageCounts = 0;
 148              		.loc 1 117 0
 149 0032 0023     		movs	r3, #0
 150 0034 C7F83432 		str	r3, [r7, #564]
 118:main.c        **** 	
 119:main.c        ****     /* Index variable to work on the filter array */
 120:main.c        ****     uint8 index = 0;
 151              		.loc 1 120 0
 152 0038 0023     		movs	r3, #0
 153 003a 87F83332 		strb	r3, [r7, #563]
 121:main.c        ****     
 122:main.c        ****     /* Variables to calculate and hold NotePerfect DAC value */
 123:main.c        ****     uint32 notePerfectValue = 0;
 154              		.loc 1 123 0
 155 003e 0023     		movs	r3, #0
 156 0040 C7F82C32 		str	r3, [r7, #556]
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 6


 124:main.c        ****     uint32 previousNotePerfectValue = 0;
 157              		.loc 1 124 0
 158 0044 0023     		movs	r3, #0
 159 0046 C7F82832 		str	r3, [r7, #552]
 125:main.c        ****     uint32 remainder = 0;
 160              		.loc 1 125 0
 161 004a 0023     		movs	r3, #0
 162 004c C7F81432 		str	r3, [r7, #532]
 126:main.c        ****     
 127:main.c        ****     /* Character array to hold the micro volts*/
 128:main.c        ****     char displayStr[15] = {'\0'};
 163              		.loc 1 128 0
 164 0050 3B1D     		adds	r3, r7, #4
 165 0052 1A46     		mov	r2, r3
 166 0054 0023     		movs	r3, #0
 167 0056 1360     		str	r3, [r2]
 168 0058 5360     		str	r3, [r2, #4]
 169 005a 9360     		str	r3, [r2, #8]
 170 005c C2F80B30 		str	r3, [r2, #11]	@ unaligned
 129:main.c        ****     
 130:main.c        ****     /* variable/flag to hold status of input selection (Pot or CV) */
 131:main.c        ****     uint8_t toggleFlag = 0;
 171              		.loc 1 131 0
 172 0060 0023     		movs	r3, #0
 173 0062 87F82732 		strb	r3, [r7, #551]
 132:main.c        **** 
 133:main.c        ****     CYGlobalIntEnable;
 174              		.loc 1 133 0
 175              		.syntax unified
 176              	@ 133 "main.c" 1
 177 0066 62B6     		CPSIE   i
 178              	@ 0 "" 2
 134:main.c        **** 
 135:main.c        ****     /* Start ADC and start conversion */
 136:main.c        ****     ADC_Start();
 179              		.loc 1 136 0
 180              		.thumb
 181              		.syntax unified
 182 0068 FFF7FEFF 		bl	ADC_Start
 137:main.c        ****     ADC_StartConvert();
 183              		.loc 1 137 0
 184 006c FFF7FEFF 		bl	ADC_StartConvert
 138:main.c        **** 
 139:main.c        ****     /* Start LCD and set position */
 140:main.c        ****     LCD_Start();
 185              		.loc 1 140 0
 186 0070 FFF7FEFF 		bl	LCD_Start
 141:main.c        ****     LCD_Position(0,0);
 187              		.loc 1 141 0
 188 0074 0021     		movs	r1, #0
 189 0076 0020     		movs	r0, #0
 190 0078 FFF7FEFF 		bl	LCD_Position
 142:main.c        ****     LCD_PrintString("Pot      Step=");
 191              		.loc 1 142 0
 192 007c AA48     		ldr	r0, .L16
 193 007e FFF7FEFF 		bl	LCD_PrintString
 143:main.c        **** 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 7


 144:main.c        ****     /* Print mV unit on the LCD */
 145:main.c        ****     LCD_Position(1,4);
 194              		.loc 1 145 0
 195 0082 0421     		movs	r1, #4
 196 0084 0120     		movs	r0, #1
 197 0086 FFF7FEFF 		bl	LCD_Position
 146:main.c        ****     LCD_PutChar('m');
 198              		.loc 1 146 0
 199 008a 6D20     		movs	r0, #109
 200 008c FFF7FEFF 		bl	LCD_PutChar
 147:main.c        ****     LCD_PutChar('V');
 201              		.loc 1 147 0
 202 0090 5620     		movs	r0, #86
 203 0092 FFF7FEFF 		bl	LCD_PutChar
 148:main.c        ****     LCD_Position(1,8);
 204              		.loc 1 148 0
 205 0096 0821     		movs	r1, #8
 206 0098 0120     		movs	r0, #1
 207 009a FFF7FEFF 		bl	LCD_Position
 149:main.c        ****     LCD_PrintString("DAC=");
 208              		.loc 1 149 0
 209 009e A348     		ldr	r0, .L16+4
 210 00a0 FFF7FEFF 		bl	LCD_PrintString
 150:main.c        ****     
 151:main.c        ****     /* Read one sample from the ADC and initialize the filter */
 152:main.c        ****     ADC_IsEndConversion(ADC_WAIT_FOR_RESULT);
 211              		.loc 1 152 0
 212 00a4 0020     		movs	r0, #0
 213 00a6 FFF7FEFF 		bl	ADC_IsEndConversion
 153:main.c        ****     result = ADC_GetResult32();
 214              		.loc 1 153 0
 215 00aa FFF7FEFF 		bl	ADC_GetResult32
 216 00ae C7F82002 		str	r0, [r7, #544]
 154:main.c        ****     
 155:main.c        ****     for(i = 0; i < MAX_SAMPLE; i++)
 217              		.loc 1 155 0
 218 00b2 0023     		movs	r3, #0
 219 00b4 87F83F32 		strb	r3, [r7, #575]
 220 00b8 0CE0     		b	.L2
 221              	.L3:
 156:main.c        ****     {
 157:main.c        ****         adcCounts[i] = result;
 222              		.loc 1 157 0 discriminator 3
 223 00ba 97F83F22 		ldrb	r2, [r7, #575]	@ zero_extendqisi2
 224 00be 07F11403 		add	r3, r7, #20
 225 00c2 D7F82012 		ldr	r1, [r7, #544]
 226 00c6 43F82210 		str	r1, [r3, r2, lsl #2]
 155:main.c        ****     {
 227              		.loc 1 155 0 discriminator 3
 228 00ca 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 229 00ce 0133     		adds	r3, r3, #1
 230 00d0 87F83F32 		strb	r3, [r7, #575]
 231              	.L2:
 155:main.c        ****     {
 232              		.loc 1 155 0 is_stmt 0 discriminator 1
 233 00d4 97F93F32 		ldrsb	r3, [r7, #575]
 234 00d8 002B     		cmp	r3, #0
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 8


 235 00da EEDA     		bge	.L3
 158:main.c        ****     }
 159:main.c        ****     
 160:main.c        ****     /* Store sum of 128 samples*/
 161:main.c        ****     sum = result << DIV;
 236              		.loc 1 161 0 is_stmt 1
 237 00dc D7F82032 		ldr	r3, [r7, #544]
 238 00e0 DB01     		lsls	r3, r3, #7
 239 00e2 C7F83832 		str	r3, [r7, #568]
 162:main.c        ****     
 163:main.c        ****     /* Average count is equal to one single sample for first ADC reading */
 164:main.c        ****     averageCounts = result;
 240              		.loc 1 164 0
 241 00e6 D7F82032 		ldr	r3, [r7, #544]
 242 00ea C7F83432 		str	r3, [r7, #564]
 165:main.c        ****     
 166:main.c        ****     /* start Opamp and PWM */
 167:main.c        ****     Opamp_Start();
 243              		.loc 1 167 0
 244 00ee FFF7FEFF 		bl	Opamp_Start
 168:main.c        ****     PWM_Start();
 245              		.loc 1 168 0
 246 00f2 FFF7FEFF 		bl	PWM_Start
 169:main.c        ****     
 170:main.c        ****     /* initialize indicator LEDs */
 171:main.c        ****     LED3_Write(toggleFlag);
 247              		.loc 1 171 0
 248 00f6 97F82732 		ldrb	r3, [r7, #551]	@ zero_extendqisi2
 249 00fa 1846     		mov	r0, r3
 250 00fc FFF7FEFF 		bl	LED3_Write
 172:main.c        ****     LED4_Write(~toggleFlag);
 251              		.loc 1 172 0
 252 0100 97F82732 		ldrb	r3, [r7, #551]
 253 0104 DB43     		mvns	r3, r3
 254 0106 DBB2     		uxtb	r3, r3
 255 0108 1846     		mov	r0, r3
 256 010a FFF7FEFF 		bl	LED4_Write
 173:main.c        ****     
 174:main.c        ****     /* start and initialize Analog input Mux to POT as the source */
 175:main.c        ****     myMux_Start();
 257              		.loc 1 175 0
 258 010e FFF7FEFF 		bl	myMux_Start
 176:main.c        ****     myMux_FastSelect(POT);
 259              		.loc 1 176 0
 260 0112 0020     		movs	r0, #0
 261 0114 FFF7FEFF 		bl	myMux_FastSelect
 262              	.L14:
 177:main.c        ****     
 178:main.c        ****     while(1)
 179:main.c        ****     {
 180:main.c        ****         /* user interface stuff ... switch between input sources (on-board Pot vs CV input) */
 181:main.c        ****         if(SW2_Read() == 0) /* check user switch */
 263              		.loc 1 181 0
 264 0118 FFF7FEFF 		bl	SW2_Read
 265 011c 0346     		mov	r3, r0
 266 011e 002B     		cmp	r3, #0
 267 0120 36D1     		bne	.L4
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 9


 182:main.c        ****         {
 183:main.c        ****             toggleFlag ^= 1; /* toggle flag if switch is pushed and update LEDs */
 268              		.loc 1 183 0
 269 0122 97F82732 		ldrb	r3, [r7, #551]
 270 0126 83F00103 		eor	r3, r3, #1
 271 012a 87F82732 		strb	r3, [r7, #551]
 184:main.c        ****             LED3_Write(toggleFlag);
 272              		.loc 1 184 0
 273 012e 97F82732 		ldrb	r3, [r7, #551]	@ zero_extendqisi2
 274 0132 1846     		mov	r0, r3
 275 0134 FFF7FEFF 		bl	LED3_Write
 185:main.c        ****             LED4_Write(~toggleFlag);
 276              		.loc 1 185 0
 277 0138 97F82732 		ldrb	r3, [r7, #551]
 278 013c DB43     		mvns	r3, r3
 279 013e DBB2     		uxtb	r3, r3
 280 0140 1846     		mov	r0, r3
 281 0142 FFF7FEFF 		bl	LED4_Write
 186:main.c        ****             
 187:main.c        ****             if(POT == toggleFlag) /* housekeeping for Pot selection */
 282              		.loc 1 187 0
 283 0146 97F82732 		ldrb	r3, [r7, #551]	@ zero_extendqisi2
 284 014a 002B     		cmp	r3, #0
 285 014c 09D1     		bne	.L5
 188:main.c        ****             {
 189:main.c        ****                 LCD_Position(0,0);
 286              		.loc 1 189 0
 287 014e 0021     		movs	r1, #0
 288 0150 0020     		movs	r0, #0
 289 0152 FFF7FEFF 		bl	LCD_Position
 190:main.c        ****                 LCD_PrintString("Pot");
 290              		.loc 1 190 0
 291 0156 7648     		ldr	r0, .L16+8
 292 0158 FFF7FEFF 		bl	LCD_PrintString
 191:main.c        ****                 myMux_FastSelect(POT); /* select the onboard Potentiometer as input source */
 293              		.loc 1 191 0
 294 015c 0020     		movs	r0, #0
 295 015e FFF7FEFF 		bl	myMux_FastSelect
 296              	.L5:
 192:main.c        ****             }
 193:main.c        ****             if(CV == toggleFlag) /* housekeeping for CV selection */
 297              		.loc 1 193 0
 298 0162 97F82732 		ldrb	r3, [r7, #551]	@ zero_extendqisi2
 299 0166 012B     		cmp	r3, #1
 300 0168 09D1     		bne	.L15
 194:main.c        ****             {
 195:main.c        ****                 LCD_Position(0,0);
 301              		.loc 1 195 0
 302 016a 0021     		movs	r1, #0
 303 016c 0020     		movs	r0, #0
 304 016e FFF7FEFF 		bl	LCD_Position
 196:main.c        ****                 LCD_PrintString("CV ");
 305              		.loc 1 196 0
 306 0172 7048     		ldr	r0, .L16+12
 307 0174 FFF7FEFF 		bl	LCD_PrintString
 197:main.c        ****                 myMux_FastSelect(CV); /* select CV as input source */
 308              		.loc 1 197 0
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 10


 309 0178 0120     		movs	r0, #1
 310 017a FFF7FEFF 		bl	myMux_FastSelect
 311              	.L15:
 198:main.c        ****             }
 199:main.c        ****             while(0 == SW2_Read()) /* lazy man's debounce ... just wait here until switch is releas
 312              		.loc 1 199 0
 313 017e 00BF     		nop
 314              	.L7:
 315              		.loc 1 199 0 is_stmt 0 discriminator 1
 316 0180 FFF7FEFF 		bl	SW2_Read
 317 0184 0346     		mov	r3, r0
 318 0186 002B     		cmp	r3, #0
 319 0188 FAD0     		beq	.L7
 200:main.c        ****             ;
 201:main.c        ****             CyDelay(200); /* delay for some arbitrarily long debounce time */
 320              		.loc 1 201 0 is_stmt 1
 321 018a C820     		movs	r0, #200
 322 018c FFF7FEFF 		bl	CyDelay
 323              	.L4:
 202:main.c        ****         }
 203:main.c        ****         
 204:main.c        ****         /* start the ADC conversion and wait for the result */
 205:main.c        ****         ADC_IsEndConversion(ADC_WAIT_FOR_RESULT);
 324              		.loc 1 205 0
 325 0190 0020     		movs	r0, #0
 326 0192 FFF7FEFF 		bl	ADC_IsEndConversion
 206:main.c        ****         result = ADC_GetResult32();
 327              		.loc 1 206 0
 328 0196 FFF7FEFF 		bl	ADC_GetResult32
 329 019a C7F82002 		str	r0, [r7, #544]
 207:main.c        ****         
 208:main.c        ****         diff = abs(averageCounts - result); /* calculate instantaneous difference to determine if a
 330              		.loc 1 208 0
 331 019e D7F83422 		ldr	r2, [r7, #564]
 332 01a2 D7F82032 		ldr	r3, [r7, #544]
 333 01a6 D31A     		subs	r3, r2, r3
 334 01a8 002B     		cmp	r3, #0
 335 01aa B8BF     		it	lt
 336 01ac 5B42     		rsblt	r3, r3, #0
 337 01ae A7F81E32 		strh	r3, [r7, #542]	@ movhi
 209:main.c        **** 
 210:main.c        ****         /* If sharp change in the signal then reset the filter with the new signal value */
 211:main.c        ****         if(diff > SIGNAL_SLOPE)
 338              		.loc 1 211 0
 339 01b2 B7F91E32 		ldrsh	r3, [r7, #542]
 340 01b6 B3F57A7F 		cmp	r3, #1000
 341 01ba 21DD     		ble	.L8
 212:main.c        ****         {
 213:main.c        ****             /* fill the filter array with current value */
 214:main.c        ****             for(i = 0; i < MAX_SAMPLE; i++)
 342              		.loc 1 214 0
 343 01bc 0023     		movs	r3, #0
 344 01be 87F83F32 		strb	r3, [r7, #575]
 345 01c2 0CE0     		b	.L9
 346              	.L10:
 215:main.c        ****             {
 216:main.c        ****                 adcCounts[i] = result;
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 11


 347              		.loc 1 216 0 discriminator 3
 348 01c4 97F83F22 		ldrb	r2, [r7, #575]	@ zero_extendqisi2
 349 01c8 07F11403 		add	r3, r7, #20
 350 01cc D7F82012 		ldr	r1, [r7, #544]
 351 01d0 43F82210 		str	r1, [r3, r2, lsl #2]
 214:main.c        ****             {
 352              		.loc 1 214 0 discriminator 3
 353 01d4 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 354 01d8 0133     		adds	r3, r3, #1
 355 01da 87F83F32 		strb	r3, [r7, #575]
 356              	.L9:
 214:main.c        ****             {
 357              		.loc 1 214 0 is_stmt 0 discriminator 1
 358 01de 97F93F32 		ldrsb	r3, [r7, #575]
 359 01e2 002B     		cmp	r3, #0
 360 01e4 EEDA     		bge	.L10
 217:main.c        ****             }
 218:main.c        ****             
 219:main.c        ****             /* Store sum of 128 samples*/
 220:main.c        ****             sum = result << DIV;
 361              		.loc 1 220 0 is_stmt 1
 362 01e6 D7F82032 		ldr	r3, [r7, #544]
 363 01ea DB01     		lsls	r3, r3, #7
 364 01ec C7F83832 		str	r3, [r7, #568]
 221:main.c        ****     
 222:main.c        ****             /* Average count is equal to new sample */
 223:main.c        ****             averageCounts = result;
 365              		.loc 1 223 0
 366 01f0 D7F82032 		ldr	r3, [r7, #544]
 367 01f4 C7F83432 		str	r3, [r7, #564]
 224:main.c        ****             index = 0;
 368              		.loc 1 224 0
 369 01f8 0023     		movs	r3, #0
 370 01fa 87F83332 		strb	r3, [r7, #563]
 371 01fe 2AE0     		b	.L11
 372              	.L8:
 225:main.c        ****         }
 226:main.c        ****         
 227:main.c        ****         /* Get moving average */
 228:main.c        ****         else
 229:main.c        ****         {
 230:main.c        ****             /* Remove the oldest element and add new sample to sum and get the average */
 231:main.c        ****             sum = sum - adcCounts[index];
 373              		.loc 1 231 0
 374 0200 97F83322 		ldrb	r2, [r7, #563]	@ zero_extendqisi2
 375 0204 07F11403 		add	r3, r7, #20
 376 0208 53F82230 		ldr	r3, [r3, r2, lsl #2]
 377 020c D7F83822 		ldr	r2, [r7, #568]
 378 0210 D31A     		subs	r3, r2, r3
 379 0212 C7F83832 		str	r3, [r7, #568]
 232:main.c        ****             sum = sum + result;
 380              		.loc 1 232 0
 381 0216 D7F83822 		ldr	r2, [r7, #568]
 382 021a D7F82032 		ldr	r3, [r7, #544]
 383 021e 1344     		add	r3, r3, r2
 384 0220 C7F83832 		str	r3, [r7, #568]
 233:main.c        ****             averageCounts = sum >> DIV;
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 12


 385              		.loc 1 233 0
 386 0224 D7F83832 		ldr	r3, [r7, #568]
 387 0228 DB11     		asrs	r3, r3, #7
 388 022a C7F83432 		str	r3, [r7, #564]
 234:main.c        ****             
 235:main.c        ****             /* Remove the oldest sample and store new sample */
 236:main.c        ****             adcCounts[index] = result;
 389              		.loc 1 236 0
 390 022e 97F83322 		ldrb	r2, [r7, #563]	@ zero_extendqisi2
 391 0232 07F11403 		add	r3, r7, #20
 392 0236 D7F82012 		ldr	r1, [r7, #544]
 393 023a 43F82210 		str	r1, [r3, r2, lsl #2]
 237:main.c        ****             index++;
 394              		.loc 1 237 0
 395 023e 97F83332 		ldrb	r3, [r7, #563]	@ zero_extendqisi2
 396 0242 0133     		adds	r3, r3, #1
 397 0244 87F83332 		strb	r3, [r7, #563]
 238:main.c        ****             if (index == MAX_SAMPLE)
 398              		.loc 1 238 0
 399 0248 97F83332 		ldrb	r3, [r7, #563]	@ zero_extendqisi2
 400 024c 802B     		cmp	r3, #128
 401 024e 02D1     		bne	.L11
 239:main.c        ****             {
 240:main.c        ****                 index = 0;
 402              		.loc 1 240 0
 403 0250 0023     		movs	r3, #0
 404 0252 87F83332 		strb	r3, [r7, #563]
 405              	.L11:
 241:main.c        ****             }
 242:main.c        ****         }
 243:main.c        ****         
 244:main.c        ****         /* convert ADC counts to milliVolts */
 245:main.c        ****         milliVolts = ADC_CountsTo_mVolts(averageCounts);
 406              		.loc 1 245 0
 407 0256 D7F83402 		ldr	r0, [r7, #564]
 408 025a FFF7FEFF 		bl	ADC_CountsTo_mVolts
 409 025e 0346     		mov	r3, r0
 410 0260 C7F81832 		str	r3, [r7, #536]
 246:main.c        ****         
 247:main.c        ****         /* NotePerfect magic happens here */
 248:main.c        ****         notePerfectValue = (milliVolts / NOTEPERFECT_STEP_SIZE_MV); /* calculate integer step numbe
 411              		.loc 1 248 0
 412 0264 D7F81832 		ldr	r3, [r7, #536]
 413 0268 334A     		ldr	r2, .L16+16
 414 026a A2FB0323 		umull	r2, r3, r2, r3
 415 026e 1B09     		lsrs	r3, r3, #4
 416 0270 C7F82C32 		str	r3, [r7, #556]
 249:main.c        ****         remainder = milliVolts % NOTEPERFECT_STEP_SIZE_MV; /* use modulo to get remainder */
 417              		.loc 1 249 0
 418 0274 D7F81832 		ldr	r3, [r7, #536]
 419 0278 2F4A     		ldr	r2, .L16+16
 420 027a A2FB0312 		umull	r1, r2, r2, r3
 421 027e 1209     		lsrs	r2, r2, #4
 422 0280 5321     		movs	r1, #83
 423 0282 01FB02F2 		mul	r2, r1, r2
 424 0286 9B1A     		subs	r3, r3, r2
 425 0288 C7F81432 		str	r3, [r7, #532]
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 13


 250:main.c        ****         if(remainder >= NOTEPERFECT_STEP_SIZE_MV/2) /* determine if round-up is necessary */
 426              		.loc 1 250 0
 427 028c D7F81432 		ldr	r3, [r7, #532]
 428 0290 282B     		cmp	r3, #40
 429 0292 04D9     		bls	.L12
 251:main.c        ****             notePerfectValue += 1;
 430              		.loc 1 251 0
 431 0294 D7F82C32 		ldr	r3, [r7, #556]
 432 0298 0133     		adds	r3, r3, #1
 433 029a C7F82C32 		str	r3, [r7, #556]
 434              	.L12:
 252:main.c        ****         
 253:main.c        ****         if(notePerfectValue != previousNotePerfectValue) /* only spend time if notePerfect step val
 435              		.loc 1 253 0
 436 029e D7F82C22 		ldr	r2, [r7, #556]
 437 02a2 D7F82832 		ldr	r3, [r7, #552]
 438 02a6 9A42     		cmp	r2, r3
 439 02a8 2DD0     		beq	.L13
 254:main.c        ****         {
 255:main.c        ****             PWM_WriteCompare(PWM_Lookup[notePerfectValue]); /* lookup PWM compare value and update 
 440              		.loc 1 255 0
 441 02aa 244A     		ldr	r2, .L16+20
 442 02ac D7F82C32 		ldr	r3, [r7, #556]
 443 02b0 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 444 02b4 1846     		mov	r0, r3
 445 02b6 FFF7FEFF 		bl	PWM_WriteCompare
 256:main.c        ****             
 257:main.c        ****             /* display housekeeping */
 258:main.c        ****             sprintf(displayStr,"%4d", PWM_Lookup[notePerfectValue]);
 446              		.loc 1 258 0
 447 02ba 204A     		ldr	r2, .L16+20
 448 02bc D7F82C32 		ldr	r3, [r7, #556]
 449 02c0 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 450 02c4 1A46     		mov	r2, r3
 451 02c6 3B1D     		adds	r3, r7, #4
 452 02c8 1D49     		ldr	r1, .L16+24
 453 02ca 1846     		mov	r0, r3
 454 02cc FFF7FEFF 		bl	sprintf
 259:main.c        ****             LCD_Position(1,12);
 455              		.loc 1 259 0
 456 02d0 0C21     		movs	r1, #12
 457 02d2 0120     		movs	r0, #1
 458 02d4 FFF7FEFF 		bl	LCD_Position
 260:main.c        ****             LCD_PrintString(displayStr);   
 459              		.loc 1 260 0
 460 02d8 3B1D     		adds	r3, r7, #4
 461 02da 1846     		mov	r0, r3
 462 02dc FFF7FEFF 		bl	LCD_PrintString
 261:main.c        ****             
 262:main.c        ****             /* Convert notePerfectValue to string and display on the LCD */
 263:main.c        ****             sprintf(displayStr,"%2ld", notePerfectValue);
 463              		.loc 1 263 0
 464 02e0 3B1D     		adds	r3, r7, #4
 465 02e2 D7F82C22 		ldr	r2, [r7, #556]
 466 02e6 1749     		ldr	r1, .L16+28
 467 02e8 1846     		mov	r0, r3
 468 02ea FFF7FEFF 		bl	sprintf
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 14


 264:main.c        ****             LCD_Position(0,14);
 469              		.loc 1 264 0
 470 02ee 0E21     		movs	r1, #14
 471 02f0 0020     		movs	r0, #0
 472 02f2 FFF7FEFF 		bl	LCD_Position
 265:main.c        ****             LCD_PrintString(displayStr);
 473              		.loc 1 265 0
 474 02f6 3B1D     		adds	r3, r7, #4
 475 02f8 1846     		mov	r0, r3
 476 02fa FFF7FEFF 		bl	LCD_PrintString
 266:main.c        ****             
 267:main.c        ****             previousNotePerfectValue = notePerfectValue;
 477              		.loc 1 267 0
 478 02fe D7F82C32 		ldr	r3, [r7, #556]
 479 0302 C7F82832 		str	r3, [r7, #552]
 480              	.L13:
 268:main.c        ****         }
 269:main.c        ****             
 270:main.c        ****         /* Convert milli volts to string and display on the LCD */
 271:main.c        ****         sprintf(displayStr,"%4ld",milliVolts);
 481              		.loc 1 271 0
 482 0306 3B1D     		adds	r3, r7, #4
 483 0308 D7F81822 		ldr	r2, [r7, #536]
 484 030c 0E49     		ldr	r1, .L16+32
 485 030e 1846     		mov	r0, r3
 486 0310 FFF7FEFF 		bl	sprintf
 272:main.c        ****         LCD_Position(1,0);
 487              		.loc 1 272 0
 488 0314 0021     		movs	r1, #0
 489 0316 0120     		movs	r0, #1
 490 0318 FFF7FEFF 		bl	LCD_Position
 273:main.c        ****         LCD_PrintString(displayStr);
 491              		.loc 1 273 0
 492 031c 3B1D     		adds	r3, r7, #4
 493 031e 1846     		mov	r0, r3
 494 0320 FFF7FEFF 		bl	LCD_PrintString
 274:main.c        ****     }	
 495              		.loc 1 274 0
 496 0324 F8E6     		b	.L14
 497              	.L17:
 498 0326 00BF     		.align	2
 499              	.L16:
 500 0328 00000000 		.word	.LC0
 501 032c 10000000 		.word	.LC1
 502 0330 18000000 		.word	.LC2
 503 0334 1C000000 		.word	.LC3
 504 0338 1F725931 		.word	827945503
 505 033c 00000000 		.word	PWM_Lookup
 506 0340 20000000 		.word	.LC4
 507 0344 24000000 		.word	.LC5
 508 0348 2C000000 		.word	.LC6
 509              		.cfi_endproc
 510              	.LFE64:
 511              		.size	main, .-main
 512              		.text
 513              	.Letext0:
 514              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 15


 515              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 516              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 517              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 518              		.section	.debug_info,"",%progbits
 519              	.Ldebug_info0:
 520 0000 1F020000 		.4byte	0x21f
 521 0004 0400     		.2byte	0x4
 522 0006 00000000 		.4byte	.Ldebug_abbrev0
 523 000a 04       		.byte	0x4
 524 000b 01       		.uleb128 0x1
 525 000c 76000000 		.4byte	.LASF37
 526 0010 0C       		.byte	0xc
 527 0011 0C020000 		.4byte	.LASF38
 528 0015 0E000000 		.4byte	.LASF39
 529 0019 00000000 		.4byte	.Ldebug_ranges0+0
 530 001d 00000000 		.4byte	0
 531 0021 00000000 		.4byte	.Ldebug_line0
 532 0025 02       		.uleb128 0x2
 533 0026 01       		.byte	0x1
 534 0027 06       		.byte	0x6
 535 0028 74020000 		.4byte	.LASF0
 536 002c 03       		.uleb128 0x3
 537 002d 6C000000 		.4byte	.LASF3
 538 0031 02       		.byte	0x2
 539 0032 1D       		.byte	0x1d
 540 0033 37000000 		.4byte	0x37
 541 0037 02       		.uleb128 0x2
 542 0038 01       		.byte	0x1
 543 0039 08       		.byte	0x8
 544 003a 34010000 		.4byte	.LASF1
 545 003e 02       		.uleb128 0x2
 546 003f 02       		.byte	0x2
 547 0040 05       		.byte	0x5
 548 0041 29020000 		.4byte	.LASF2
 549 0045 03       		.uleb128 0x3
 550 0046 82010000 		.4byte	.LASF4
 551 004a 02       		.byte	0x2
 552 004b 2B       		.byte	0x2b
 553 004c 50000000 		.4byte	0x50
 554 0050 02       		.uleb128 0x2
 555 0051 02       		.byte	0x2
 556 0052 07       		.byte	0x7
 557 0053 0E010000 		.4byte	.LASF5
 558 0057 03       		.uleb128 0x3
 559 0058 04010000 		.4byte	.LASF6
 560 005c 02       		.byte	0x2
 561 005d 3F       		.byte	0x3f
 562 005e 62000000 		.4byte	0x62
 563 0062 02       		.uleb128 0x2
 564 0063 04       		.byte	0x4
 565 0064 05       		.byte	0x5
 566 0065 55020000 		.4byte	.LASF7
 567 0069 02       		.uleb128 0x2
 568 006a 04       		.byte	0x4
 569 006b 07       		.byte	0x7
 570 006c 8D010000 		.4byte	.LASF8
 571 0070 02       		.uleb128 0x2
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 16


 572 0071 08       		.byte	0x8
 573 0072 05       		.byte	0x5
 574 0073 FE010000 		.4byte	.LASF9
 575 0077 02       		.uleb128 0x2
 576 0078 08       		.byte	0x8
 577 0079 07       		.byte	0x7
 578 007a C2010000 		.4byte	.LASF10
 579 007e 04       		.uleb128 0x4
 580 007f 04       		.byte	0x4
 581 0080 05       		.byte	0x5
 582 0081 696E7400 		.ascii	"int\000"
 583 0085 02       		.uleb128 0x2
 584 0086 04       		.byte	0x4
 585 0087 07       		.byte	0x7
 586 0088 B5010000 		.4byte	.LASF11
 587 008c 03       		.uleb128 0x3
 588 008d D9010000 		.4byte	.LASF12
 589 0091 03       		.byte	0x3
 590 0092 18       		.byte	0x18
 591 0093 2C000000 		.4byte	0x2c
 592 0097 03       		.uleb128 0x3
 593 0098 33020000 		.4byte	.LASF13
 594 009c 03       		.byte	0x3
 595 009d 24       		.byte	0x24
 596 009e 45000000 		.4byte	0x45
 597 00a2 03       		.uleb128 0x3
 598 00a3 E8010000 		.4byte	.LASF14
 599 00a7 03       		.byte	0x3
 600 00a8 2C       		.byte	0x2c
 601 00a9 57000000 		.4byte	0x57
 602 00ad 05       		.uleb128 0x5
 603 00ae 2E010000 		.4byte	.LASF15
 604 00b2 04       		.byte	0x4
 605 00b3 E701     		.2byte	0x1e7
 606 00b5 37000000 		.4byte	0x37
 607 00b9 05       		.uleb128 0x5
 608 00ba AE010000 		.4byte	.LASF16
 609 00be 04       		.byte	0x4
 610 00bf E901     		.2byte	0x1e9
 611 00c1 69000000 		.4byte	0x69
 612 00c5 05       		.uleb128 0x5
 613 00c6 4D010000 		.4byte	.LASF17
 614 00ca 04       		.byte	0x4
 615 00cb EB01     		.2byte	0x1eb
 616 00cd 3E000000 		.4byte	0x3e
 617 00d1 05       		.uleb128 0x5
 618 00d2 64010000 		.4byte	.LASF18
 619 00d6 04       		.byte	0x4
 620 00d7 EC01     		.2byte	0x1ec
 621 00d9 62000000 		.4byte	0x62
 622 00dd 02       		.uleb128 0x2
 623 00de 04       		.byte	0x4
 624 00df 04       		.byte	0x4
 625 00e0 28010000 		.4byte	.LASF19
 626 00e4 02       		.uleb128 0x2
 627 00e5 08       		.byte	0x8
 628 00e6 04       		.byte	0x4
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 17


 629 00e7 21010000 		.4byte	.LASF20
 630 00eb 02       		.uleb128 0x2
 631 00ec 01       		.byte	0x1
 632 00ed 08       		.byte	0x8
 633 00ee 13020000 		.4byte	.LASF21
 634 00f2 02       		.uleb128 0x2
 635 00f3 08       		.byte	0x8
 636 00f4 04       		.byte	0x4
 637 00f5 68020000 		.4byte	.LASF22
 638 00f9 02       		.uleb128 0x2
 639 00fa 04       		.byte	0x4
 640 00fb 07       		.byte	0x7
 641 00fc F0010000 		.4byte	.LASF23
 642 0100 06       		.uleb128 0x6
 643 0101 9F010000 		.4byte	.LASF40
 644 0105 01       		.byte	0x1
 645 0106 60       		.byte	0x60
 646 0107 7E000000 		.4byte	0x7e
 647 010b 00000000 		.4byte	.LFB64
 648 010f 4C030000 		.4byte	.LFE64-.LFB64
 649 0113 01       		.uleb128 0x1
 650 0114 9C       		.byte	0x9c
 651 0115 D0010000 		.4byte	0x1d0
 652 0119 07       		.uleb128 0x7
 653 011a 6900     		.ascii	"i\000"
 654 011c 01       		.byte	0x1
 655 011d 62       		.byte	0x62
 656 011e AD000000 		.4byte	0xad
 657 0122 02       		.uleb128 0x2
 658 0123 91       		.byte	0x91
 659 0124 77       		.sleb128 -9
 660 0125 08       		.uleb128 0x8
 661 0126 A4010000 		.4byte	.LASF24
 662 012a 01       		.byte	0x1
 663 012b 65       		.byte	0x65
 664 012c D0010000 		.4byte	0x1d0
 665 0130 03       		.uleb128 0x3
 666 0131 91       		.byte	0x91
 667 0132 CC7B     		.sleb128 -564
 668 0134 08       		.uleb128 0x8
 669 0135 E1010000 		.4byte	.LASF25
 670 0139 01       		.byte	0x1
 671 013a 68       		.byte	0x68
 672 013b D1000000 		.4byte	0xd1
 673 013f 02       		.uleb128 0x2
 674 0140 91       		.byte	0x91
 675 0141 58       		.sleb128 -40
 676 0142 07       		.uleb128 0x7
 677 0143 73756D00 		.ascii	"sum\000"
 678 0147 01       		.byte	0x1
 679 0148 6B       		.byte	0x6b
 680 0149 D1000000 		.4byte	0xd1
 681 014d 02       		.uleb128 0x2
 682 014e 91       		.byte	0x91
 683 014f 70       		.sleb128 -16
 684 0150 08       		.uleb128 0x8
 685 0151 F9010000 		.4byte	.LASF26
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 18


 686 0155 01       		.byte	0x1
 687 0156 6E       		.byte	0x6e
 688 0157 C5000000 		.4byte	0xc5
 689 015b 02       		.uleb128 0x2
 690 015c 91       		.byte	0x91
 691 015d 56       		.sleb128 -42
 692 015e 08       		.uleb128 0x8
 693 015f 77010000 		.4byte	.LASF27
 694 0163 01       		.byte	0x1
 695 0164 72       		.byte	0x72
 696 0165 D1000000 		.4byte	0xd1
 697 0169 02       		.uleb128 0x2
 698 016a 91       		.byte	0x91
 699 016b 50       		.sleb128 -48
 700 016c 08       		.uleb128 0x8
 701 016d 00000000 		.4byte	.LASF28
 702 0171 01       		.byte	0x1
 703 0172 75       		.byte	0x75
 704 0173 D1000000 		.4byte	0xd1
 705 0177 02       		.uleb128 0x2
 706 0178 91       		.byte	0x91
 707 0179 6C       		.sleb128 -20
 708 017a 08       		.uleb128 0x8
 709 017b 18020000 		.4byte	.LASF29
 710 017f 01       		.byte	0x1
 711 0180 78       		.byte	0x78
 712 0181 AD000000 		.4byte	0xad
 713 0185 02       		.uleb128 0x2
 714 0186 91       		.byte	0x91
 715 0187 6B       		.sleb128 -21
 716 0188 08       		.uleb128 0x8
 717 0189 53010000 		.4byte	.LASF30
 718 018d 01       		.byte	0x1
 719 018e 7B       		.byte	0x7b
 720 018f B9000000 		.4byte	0xb9
 721 0193 02       		.uleb128 0x2
 722 0194 91       		.byte	0x91
 723 0195 64       		.sleb128 -28
 724 0196 08       		.uleb128 0x8
 725 0197 3C020000 		.4byte	.LASF31
 726 019b 01       		.byte	0x1
 727 019c 7C       		.byte	0x7c
 728 019d B9000000 		.4byte	0xb9
 729 01a1 02       		.uleb128 0x2
 730 01a2 91       		.byte	0x91
 731 01a3 60       		.sleb128 -32
 732 01a4 08       		.uleb128 0x8
 733 01a5 5E020000 		.4byte	.LASF32
 734 01a9 01       		.byte	0x1
 735 01aa 7D       		.byte	0x7d
 736 01ab B9000000 		.4byte	0xb9
 737 01af 02       		.uleb128 0x2
 738 01b0 91       		.byte	0x91
 739 01b1 4C       		.sleb128 -52
 740 01b2 08       		.uleb128 0x8
 741 01b3 1E020000 		.4byte	.LASF33
 742 01b7 01       		.byte	0x1
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 19


 743 01b8 80       		.byte	0x80
 744 01b9 E0010000 		.4byte	0x1e0
 745 01bd 03       		.uleb128 0x3
 746 01be 91       		.byte	0x91
 747 01bf BC7B     		.sleb128 -580
 748 01c1 08       		.uleb128 0x8
 749 01c2 80020000 		.4byte	.LASF34
 750 01c6 01       		.byte	0x1
 751 01c7 83       		.byte	0x83
 752 01c8 8C000000 		.4byte	0x8c
 753 01cc 02       		.uleb128 0x2
 754 01cd 91       		.byte	0x91
 755 01ce 5F       		.sleb128 -33
 756 01cf 00       		.byte	0
 757 01d0 09       		.uleb128 0x9
 758 01d1 D1000000 		.4byte	0xd1
 759 01d5 E0010000 		.4byte	0x1e0
 760 01d9 0A       		.uleb128 0xa
 761 01da F9000000 		.4byte	0xf9
 762 01de 7F       		.byte	0x7f
 763 01df 00       		.byte	0
 764 01e0 09       		.uleb128 0x9
 765 01e1 EB000000 		.4byte	0xeb
 766 01e5 F0010000 		.4byte	0x1f0
 767 01e9 0A       		.uleb128 0xa
 768 01ea F9000000 		.4byte	0xf9
 769 01ee 0E       		.byte	0xe
 770 01ef 00       		.byte	0
 771 01f0 0B       		.uleb128 0xb
 772 01f1 6A010000 		.4byte	.LASF35
 773 01f5 05       		.byte	0x5
 774 01f6 1207     		.2byte	0x712
 775 01f8 FC010000 		.4byte	0x1fc
 776 01fc 0C       		.uleb128 0xc
 777 01fd A2000000 		.4byte	0xa2
 778 0201 09       		.uleb128 0x9
 779 0202 97000000 		.4byte	0x97
 780 0206 11020000 		.4byte	0x211
 781 020a 0A       		.uleb128 0xa
 782 020b F9000000 		.4byte	0xf9
 783 020f 3C       		.byte	0x3c
 784 0210 00       		.byte	0
 785 0211 0D       		.uleb128 0xd
 786 0212 42010000 		.4byte	.LASF36
 787 0216 01       		.byte	0x1
 788 0217 5A       		.byte	0x5a
 789 0218 01020000 		.4byte	0x201
 790 021c 05       		.uleb128 0x5
 791 021d 03       		.byte	0x3
 792 021e 00000000 		.4byte	PWM_Lookup
 793 0222 00       		.byte	0
 794              		.section	.debug_abbrev,"",%progbits
 795              	.Ldebug_abbrev0:
 796 0000 01       		.uleb128 0x1
 797 0001 11       		.uleb128 0x11
 798 0002 01       		.byte	0x1
 799 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 20


 800 0004 0E       		.uleb128 0xe
 801 0005 13       		.uleb128 0x13
 802 0006 0B       		.uleb128 0xb
 803 0007 03       		.uleb128 0x3
 804 0008 0E       		.uleb128 0xe
 805 0009 1B       		.uleb128 0x1b
 806 000a 0E       		.uleb128 0xe
 807 000b 55       		.uleb128 0x55
 808 000c 17       		.uleb128 0x17
 809 000d 11       		.uleb128 0x11
 810 000e 01       		.uleb128 0x1
 811 000f 10       		.uleb128 0x10
 812 0010 17       		.uleb128 0x17
 813 0011 00       		.byte	0
 814 0012 00       		.byte	0
 815 0013 02       		.uleb128 0x2
 816 0014 24       		.uleb128 0x24
 817 0015 00       		.byte	0
 818 0016 0B       		.uleb128 0xb
 819 0017 0B       		.uleb128 0xb
 820 0018 3E       		.uleb128 0x3e
 821 0019 0B       		.uleb128 0xb
 822 001a 03       		.uleb128 0x3
 823 001b 0E       		.uleb128 0xe
 824 001c 00       		.byte	0
 825 001d 00       		.byte	0
 826 001e 03       		.uleb128 0x3
 827 001f 16       		.uleb128 0x16
 828 0020 00       		.byte	0
 829 0021 03       		.uleb128 0x3
 830 0022 0E       		.uleb128 0xe
 831 0023 3A       		.uleb128 0x3a
 832 0024 0B       		.uleb128 0xb
 833 0025 3B       		.uleb128 0x3b
 834 0026 0B       		.uleb128 0xb
 835 0027 49       		.uleb128 0x49
 836 0028 13       		.uleb128 0x13
 837 0029 00       		.byte	0
 838 002a 00       		.byte	0
 839 002b 04       		.uleb128 0x4
 840 002c 24       		.uleb128 0x24
 841 002d 00       		.byte	0
 842 002e 0B       		.uleb128 0xb
 843 002f 0B       		.uleb128 0xb
 844 0030 3E       		.uleb128 0x3e
 845 0031 0B       		.uleb128 0xb
 846 0032 03       		.uleb128 0x3
 847 0033 08       		.uleb128 0x8
 848 0034 00       		.byte	0
 849 0035 00       		.byte	0
 850 0036 05       		.uleb128 0x5
 851 0037 16       		.uleb128 0x16
 852 0038 00       		.byte	0
 853 0039 03       		.uleb128 0x3
 854 003a 0E       		.uleb128 0xe
 855 003b 3A       		.uleb128 0x3a
 856 003c 0B       		.uleb128 0xb
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 21


 857 003d 3B       		.uleb128 0x3b
 858 003e 05       		.uleb128 0x5
 859 003f 49       		.uleb128 0x49
 860 0040 13       		.uleb128 0x13
 861 0041 00       		.byte	0
 862 0042 00       		.byte	0
 863 0043 06       		.uleb128 0x6
 864 0044 2E       		.uleb128 0x2e
 865 0045 01       		.byte	0x1
 866 0046 3F       		.uleb128 0x3f
 867 0047 19       		.uleb128 0x19
 868 0048 03       		.uleb128 0x3
 869 0049 0E       		.uleb128 0xe
 870 004a 3A       		.uleb128 0x3a
 871 004b 0B       		.uleb128 0xb
 872 004c 3B       		.uleb128 0x3b
 873 004d 0B       		.uleb128 0xb
 874 004e 27       		.uleb128 0x27
 875 004f 19       		.uleb128 0x19
 876 0050 49       		.uleb128 0x49
 877 0051 13       		.uleb128 0x13
 878 0052 11       		.uleb128 0x11
 879 0053 01       		.uleb128 0x1
 880 0054 12       		.uleb128 0x12
 881 0055 06       		.uleb128 0x6
 882 0056 40       		.uleb128 0x40
 883 0057 18       		.uleb128 0x18
 884 0058 9642     		.uleb128 0x2116
 885 005a 19       		.uleb128 0x19
 886 005b 01       		.uleb128 0x1
 887 005c 13       		.uleb128 0x13
 888 005d 00       		.byte	0
 889 005e 00       		.byte	0
 890 005f 07       		.uleb128 0x7
 891 0060 34       		.uleb128 0x34
 892 0061 00       		.byte	0
 893 0062 03       		.uleb128 0x3
 894 0063 08       		.uleb128 0x8
 895 0064 3A       		.uleb128 0x3a
 896 0065 0B       		.uleb128 0xb
 897 0066 3B       		.uleb128 0x3b
 898 0067 0B       		.uleb128 0xb
 899 0068 49       		.uleb128 0x49
 900 0069 13       		.uleb128 0x13
 901 006a 02       		.uleb128 0x2
 902 006b 18       		.uleb128 0x18
 903 006c 00       		.byte	0
 904 006d 00       		.byte	0
 905 006e 08       		.uleb128 0x8
 906 006f 34       		.uleb128 0x34
 907 0070 00       		.byte	0
 908 0071 03       		.uleb128 0x3
 909 0072 0E       		.uleb128 0xe
 910 0073 3A       		.uleb128 0x3a
 911 0074 0B       		.uleb128 0xb
 912 0075 3B       		.uleb128 0x3b
 913 0076 0B       		.uleb128 0xb
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 22


 914 0077 49       		.uleb128 0x49
 915 0078 13       		.uleb128 0x13
 916 0079 02       		.uleb128 0x2
 917 007a 18       		.uleb128 0x18
 918 007b 00       		.byte	0
 919 007c 00       		.byte	0
 920 007d 09       		.uleb128 0x9
 921 007e 01       		.uleb128 0x1
 922 007f 01       		.byte	0x1
 923 0080 49       		.uleb128 0x49
 924 0081 13       		.uleb128 0x13
 925 0082 01       		.uleb128 0x1
 926 0083 13       		.uleb128 0x13
 927 0084 00       		.byte	0
 928 0085 00       		.byte	0
 929 0086 0A       		.uleb128 0xa
 930 0087 21       		.uleb128 0x21
 931 0088 00       		.byte	0
 932 0089 49       		.uleb128 0x49
 933 008a 13       		.uleb128 0x13
 934 008b 2F       		.uleb128 0x2f
 935 008c 0B       		.uleb128 0xb
 936 008d 00       		.byte	0
 937 008e 00       		.byte	0
 938 008f 0B       		.uleb128 0xb
 939 0090 34       		.uleb128 0x34
 940 0091 00       		.byte	0
 941 0092 03       		.uleb128 0x3
 942 0093 0E       		.uleb128 0xe
 943 0094 3A       		.uleb128 0x3a
 944 0095 0B       		.uleb128 0xb
 945 0096 3B       		.uleb128 0x3b
 946 0097 05       		.uleb128 0x5
 947 0098 49       		.uleb128 0x49
 948 0099 13       		.uleb128 0x13
 949 009a 3F       		.uleb128 0x3f
 950 009b 19       		.uleb128 0x19
 951 009c 3C       		.uleb128 0x3c
 952 009d 19       		.uleb128 0x19
 953 009e 00       		.byte	0
 954 009f 00       		.byte	0
 955 00a0 0C       		.uleb128 0xc
 956 00a1 35       		.uleb128 0x35
 957 00a2 00       		.byte	0
 958 00a3 49       		.uleb128 0x49
 959 00a4 13       		.uleb128 0x13
 960 00a5 00       		.byte	0
 961 00a6 00       		.byte	0
 962 00a7 0D       		.uleb128 0xd
 963 00a8 34       		.uleb128 0x34
 964 00a9 00       		.byte	0
 965 00aa 03       		.uleb128 0x3
 966 00ab 0E       		.uleb128 0xe
 967 00ac 3A       		.uleb128 0x3a
 968 00ad 0B       		.uleb128 0xb
 969 00ae 3B       		.uleb128 0x3b
 970 00af 0B       		.uleb128 0xb
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 23


 971 00b0 49       		.uleb128 0x49
 972 00b1 13       		.uleb128 0x13
 973 00b2 3F       		.uleb128 0x3f
 974 00b3 19       		.uleb128 0x19
 975 00b4 02       		.uleb128 0x2
 976 00b5 18       		.uleb128 0x18
 977 00b6 00       		.byte	0
 978 00b7 00       		.byte	0
 979 00b8 00       		.byte	0
 980              		.section	.debug_aranges,"",%progbits
 981 0000 1C000000 		.4byte	0x1c
 982 0004 0200     		.2byte	0x2
 983 0006 00000000 		.4byte	.Ldebug_info0
 984 000a 04       		.byte	0x4
 985 000b 00       		.byte	0
 986 000c 0000     		.2byte	0
 987 000e 0000     		.2byte	0
 988 0010 00000000 		.4byte	.LFB64
 989 0014 4C030000 		.4byte	.LFE64-.LFB64
 990 0018 00000000 		.4byte	0
 991 001c 00000000 		.4byte	0
 992              		.section	.debug_ranges,"",%progbits
 993              	.Ldebug_ranges0:
 994 0000 00000000 		.4byte	.LFB64
 995 0004 4C030000 		.4byte	.LFE64
 996 0008 00000000 		.4byte	0
 997 000c 00000000 		.4byte	0
 998              		.section	.debug_line,"",%progbits
 999              	.Ldebug_line0:
 1000 0000 DC010000 		.section	.debug_str,"MS",%progbits,1
 1000      02004C01 
 1000      00000201 
 1000      FB0E0D00 
 1000      01010101 
 1001              	.LASF28:
 1002 0000 61766572 		.ascii	"averageCounts\000"
 1002      61676543 
 1002      6F756E74 
 1002      7300
 1003              	.LASF39:
 1004 000e 433A5C55 		.ascii	"C:\\Users\\David\\Documents\\Technical Topics\\PSoC"
 1004      73657273 
 1004      5C446176 
 1004      69645C44 
 1004      6F63756D 
 1005 003c 20437265 		.ascii	" Creator Projects\\NotePerfect\\NotePerfect.cydsn\000"
 1005      61746F72 
 1005      2050726F 
 1005      6A656374 
 1005      735C4E6F 
 1006              	.LASF3:
 1007 006c 5F5F7569 		.ascii	"__uint8_t\000"
 1007      6E74385F 
 1007      7400
 1008              	.LASF37:
 1009 0076 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1009      43313120 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 24


 1009      352E342E 
 1009      31203230 
 1009      31363036 
 1010 00a9 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1010      20726576 
 1010      6973696F 
 1010      6E203233 
 1010      37373135 
 1011 00dc 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1011      66756E63 
 1011      74696F6E 
 1011      2D736563 
 1011      74696F6E 
 1012              	.LASF6:
 1013 0104 5F5F696E 		.ascii	"__int32_t\000"
 1013      7433325F 
 1013      7400
 1014              	.LASF5:
 1015 010e 73686F72 		.ascii	"short unsigned int\000"
 1015      7420756E 
 1015      7369676E 
 1015      65642069 
 1015      6E7400
 1016              	.LASF20:
 1017 0121 646F7562 		.ascii	"double\000"
 1017      6C6500
 1018              	.LASF19:
 1019 0128 666C6F61 		.ascii	"float\000"
 1019      7400
 1020              	.LASF15:
 1021 012e 75696E74 		.ascii	"uint8\000"
 1021      3800
 1022              	.LASF1:
 1023 0134 756E7369 		.ascii	"unsigned char\000"
 1023      676E6564 
 1023      20636861 
 1023      7200
 1024              	.LASF36:
 1025 0142 50574D5F 		.ascii	"PWM_Lookup\000"
 1025      4C6F6F6B 
 1025      757000
 1026              	.LASF17:
 1027 014d 696E7431 		.ascii	"int16\000"
 1027      3600
 1028              	.LASF30:
 1029 0153 6E6F7465 		.ascii	"notePerfectValue\000"
 1029      50657266 
 1029      65637456 
 1029      616C7565 
 1029      00
 1030              	.LASF18:
 1031 0164 696E7433 		.ascii	"int32\000"
 1031      3200
 1032              	.LASF35:
 1033 016a 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1033      52784275 
 1033      66666572 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 25


 1033      00
 1034              	.LASF27:
 1035 0177 6D696C6C 		.ascii	"milliVolts\000"
 1035      69566F6C 
 1035      747300
 1036              	.LASF4:
 1037 0182 5F5F7569 		.ascii	"__uint16_t\000"
 1037      6E743136 
 1037      5F7400
 1038              	.LASF8:
 1039 018d 6C6F6E67 		.ascii	"long unsigned int\000"
 1039      20756E73 
 1039      69676E65 
 1039      6420696E 
 1039      7400
 1040              	.LASF40:
 1041 019f 6D61696E 		.ascii	"main\000"
 1041      00
 1042              	.LASF24:
 1043 01a4 61646343 		.ascii	"adcCounts\000"
 1043      6F756E74 
 1043      7300
 1044              	.LASF16:
 1045 01ae 75696E74 		.ascii	"uint32\000"
 1045      333200
 1046              	.LASF11:
 1047 01b5 756E7369 		.ascii	"unsigned int\000"
 1047      676E6564 
 1047      20696E74 
 1047      00
 1048              	.LASF10:
 1049 01c2 6C6F6E67 		.ascii	"long long unsigned int\000"
 1049      206C6F6E 
 1049      6720756E 
 1049      7369676E 
 1049      65642069 
 1050              	.LASF12:
 1051 01d9 75696E74 		.ascii	"uint8_t\000"
 1051      385F7400 
 1052              	.LASF25:
 1053 01e1 72657375 		.ascii	"result\000"
 1053      6C7400
 1054              	.LASF14:
 1055 01e8 696E7433 		.ascii	"int32_t\000"
 1055      325F7400 
 1056              	.LASF23:
 1057 01f0 73697A65 		.ascii	"sizetype\000"
 1057      74797065 
 1057      00
 1058              	.LASF26:
 1059 01f9 64696666 		.ascii	"diff\000"
 1059      00
 1060              	.LASF9:
 1061 01fe 6C6F6E67 		.ascii	"long long int\000"
 1061      206C6F6E 
 1061      6720696E 
 1061      7400
ARM GAS  C:\Users\David\AppData\Local\Temp\ccLx5LFu.s 			page 26


 1062              	.LASF38:
 1063 020c 6D61696E 		.ascii	"main.c\000"
 1063      2E6300
 1064              	.LASF21:
 1065 0213 63686172 		.ascii	"char\000"
 1065      00
 1066              	.LASF29:
 1067 0218 696E6465 		.ascii	"index\000"
 1067      7800
 1068              	.LASF33:
 1069 021e 64697370 		.ascii	"displayStr\000"
 1069      6C617953 
 1069      747200
 1070              	.LASF2:
 1071 0229 73686F72 		.ascii	"short int\000"
 1071      7420696E 
 1071      7400
 1072              	.LASF13:
 1073 0233 75696E74 		.ascii	"uint16_t\000"
 1073      31365F74 
 1073      00
 1074              	.LASF31:
 1075 023c 70726576 		.ascii	"previousNotePerfectValue\000"
 1075      696F7573 
 1075      4E6F7465 
 1075      50657266 
 1075      65637456 
 1076              	.LASF7:
 1077 0255 6C6F6E67 		.ascii	"long int\000"
 1077      20696E74 
 1077      00
 1078              	.LASF32:
 1079 025e 72656D61 		.ascii	"remainder\000"
 1079      696E6465 
 1079      7200
 1080              	.LASF22:
 1081 0268 6C6F6E67 		.ascii	"long double\000"
 1081      20646F75 
 1081      626C6500 
 1082              	.LASF0:
 1083 0274 7369676E 		.ascii	"signed char\000"
 1083      65642063 
 1083      68617200 
 1084              	.LASF34:
 1085 0280 746F6767 		.ascii	"toggleFlag\000"
 1085      6C65466C 
 1085      616700
 1086              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran

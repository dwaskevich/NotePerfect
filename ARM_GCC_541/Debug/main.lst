ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PWM_Lookup
  20              		.data
  21              		.align	2
  22              		.type	PWM_Lookup, %object
  23              		.size	PWM_Lookup, 122
  24              	PWM_Lookup:
  25 0000 0000     		.short	0
  26 0002 5300     		.short	83
  27 0004 A700     		.short	167
  28 0006 FA00     		.short	250
  29 0008 4D01     		.short	333
  30 000a A101     		.short	417
  31 000c F401     		.short	500
  32 000e 4702     		.short	583
  33 0010 9B02     		.short	667
  34 0012 EE02     		.short	750
  35 0014 4103     		.short	833
  36 0016 9503     		.short	917
  37 0018 E803     		.short	1000
  38 001a 3B04     		.short	1083
  39 001c 8F04     		.short	1167
  40 001e E204     		.short	1250
  41 0020 3505     		.short	1333
  42 0022 8905     		.short	1417
  43 0024 DC05     		.short	1500
  44 0026 2F06     		.short	1583
  45 0028 8306     		.short	1667
  46 002a D606     		.short	1750
  47 002c 2907     		.short	1833
  48 002e 7D07     		.short	1917
  49 0030 D007     		.short	2000
  50 0032 2308     		.short	2083
  51 0034 7708     		.short	2167
  52 0036 CA08     		.short	2250
  53 0038 1D09     		.short	2333
  54 003a 7109     		.short	2417
  55 003c C409     		.short	2500
  56 003e 170A     		.short	2583
  57 0040 6B0A     		.short	2667
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 2


  58 0042 BE0A     		.short	2750
  59 0044 110B     		.short	2833
  60 0046 650B     		.short	2917
  61 0048 B80B     		.short	3000
  62 004a 0B0C     		.short	3083
  63 004c 5F0C     		.short	3167
  64 004e B20C     		.short	3250
  65 0050 050D     		.short	3333
  66 0052 590D     		.short	3417
  67 0054 AC0D     		.short	3500
  68 0056 FF0D     		.short	3583
  69 0058 530E     		.short	3667
  70 005a A60E     		.short	3750
  71 005c F90E     		.short	3833
  72 005e 4D0F     		.short	3917
  73 0060 A00F     		.short	4000
  74 0062 F30F     		.short	4083
  75 0064 4710     		.short	4167
  76 0066 9A10     		.short	4250
  77 0068 ED10     		.short	4333
  78 006a 4111     		.short	4417
  79 006c 9411     		.short	4500
  80 006e E711     		.short	4583
  81 0070 3B12     		.short	4667
  82 0072 8E12     		.short	4750
  83 0074 E112     		.short	4833
  84 0076 3513     		.short	4917
  85 0078 8813     		.short	5000
  86              		.section	.rodata
  87              		.align	2
  88              	.LC0:
  89 0000 41444320 		.ascii	"ADC    Step = \000"
  89      20202053 
  89      74657020 
  89      3D2000
  90 000f 00       		.align	2
  91              	.LC1:
  92 0010 44414320 		.ascii	"DAC =\000"
  92      3D00
  93 0016 0000     		.align	2
  94              	.LC2:
  95 0018 25346400 		.ascii	"%4d\000"
  96              		.align	2
  97              	.LC3:
  98 001c 25346C64 		.ascii	"%4ld\000"
  98      00
  99 0021 000000   		.align	2
 100              	.LC4:
 101 0024 25326C64 		.ascii	"%2ld\000"
 101      00
 102              		.section	.text.main,"ax",%progbits
 103              		.align	2
 104              		.global	main
 105              		.thumb
 106              		.thumb_func
 107              		.type	main, %function
 108              	main:
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 3


 109              	.LFB64:
 110              		.file 1 "main.c"
   1:main.c        **** ï»¿/******************************************************************************
   2:main.c        **** * File Name: Main.c
   3:main.c        **** *
   4:main.c        **** * Version 1.1
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** * This file contains the main function for the voltage Display test.
   8:main.c        **** *
   9:main.c        **** * Note:
  10:main.c        **** *
  11:main.c        **** * Code tested with:
  12:main.c        **** * PSoC Creator: 3.0
  13:main.c        **** * Device Tested With: CY8C5868AXI-LP035
  14:main.c        **** * Compiler    : ARMGCC 4.4.1, ARM RVDS Generic, ARM MDK Generic
  15:main.c        **** *
  16:main.c        **** ********************************************************************************
  17:main.c        **** * Copyright (2013), Cypress Semiconductor Corporation. All Rights Reserved.
  18:main.c        **** ********************************************************************************
  19:main.c        **** * This software is owned by Cypress Semiconductor Corporation (Cypress)
  20:main.c        **** * and is protected by and subject to worldwide patent protection (United
  21:main.c        **** * States and foreign), United States copyright laws and international treaty
  22:main.c        **** * provisions. Cypress hereby grants to licensee a personal, non-exclusive,
  23:main.c        **** * non-transferable license to copy, use, modify, create derivative works of,
  24:main.c        **** * and compile the Cypress Source Code and derivative works for the sole
  25:main.c        **** * purpose of creating custom software in support of licensee product to be
  26:main.c        **** * used only in conjunction with a Cypress integrated circuit as specified in
  27:main.c        **** * the applicable agreement. Any reproduction, modification, translation,
  28:main.c        **** * compilation, or representation of this software except as specified above 
  29:main.c        **** * is prohibited without the express written permission of Cypress.
  30:main.c        **** *
  31:main.c        **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
  32:main.c        **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  33:main.c        **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  34:main.c        **** * Cypress reserves the right to make changes without further notice to the 
  35:main.c        **** * materials described herein. Cypress does not assume any liability arising out 
  36:main.c        **** * of the application or use of any product or circuit described herein. Cypress 
  37:main.c        **** * does not authorize its products for use as critical components in life-support 
  38:main.c        **** * systems where a malfunction or failure may reasonably be expected to result in 
  39:main.c        **** * significant injury to the user. The inclusion of Cypress' product in a life-
  40:main.c        **** * support systems application implies that the manufacturer assumes all risk of 
  41:main.c        **** * such use and in doing so indemnifies Cypress against all charges. 
  42:main.c        **** *
  43:main.c        **** * Use of this Software may be limited by and subject to the applicable Cypress
  44:main.c        **** * software license agreement. 
  45:main.c        **** *******************************************************************************/
  46:main.c        **** 
  47:main.c        **** /******************************************************************************
  48:main.c        **** *                           THEORY OF OPERATION
  49:main.c        **** * This project demonstrates how ADC is used to read the input voltage at 
  50:main.c        **** * it's input and display it on the LCD.
  51:main.c        **** * 
  52:main.c        **** * The Potentiometer is connected to the input of the DelSig ADC. ADC is 
  53:main.c        **** * configured with 20 bit of resolution to measure the input voltage with 
  54:main.c        **** * higher accuracy. Moving average filter of 128 samples is applied to the ADC
  55:main.c        **** * conversion result before displaying the result in micro volts on the LCD. 
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 4


  56:main.c        **** *
  57:main.c        **** * Hardware connection on the Kit
  58:main.c        **** * Potentiometer - PORT 6[5] 
  59:main.c        **** * LCD - PORT 2[0..6]
  60:main.c        **** *******************************************************************************/
  61:main.c        **** #include <device.h>
  62:main.c        **** #include "stdio.h"
  63:main.c        **** #include "stdlib.h"
  64:main.c        **** //#include "math.h"
  65:main.c        **** 
  66:main.c        **** /* Number of samples to be taken before averaging the ADC value */
  67:main.c        **** #define MAX_SAMPLE                  ((uint8)128)
  68:main.c        **** 
  69:main.c        **** /* Threshold value to reset the filter for sharp change in signal */
  70:main.c        **** #define SIGNAL_SLOPE                1000
  71:main.c        **** 
  72:main.c        **** /* Number of shifts for calculating the sum and average of MAX_SAMPLE */
  73:main.c        **** #define DIV                         7
  74:main.c        **** 
  75:main.c        **** /* Number of "NotePerfect" control voltages per volt */
  76:main.c        **** #define NUMBER_NOTES_PER_VOLT       (12u)
  77:main.c        **** 
  78:main.c        **** /* Maximum control voltage */
  79:main.c        **** #define MAX_CONTROL_VOLTAGE         (5u)
  80:main.c        **** 
  81:main.c        **** /* Total number of "NotePerfect" quantized steps/values (60) */
  82:main.c        **** #define NUMBER_NOTE_PERFECT_STEPS (NUMBER_NOTES_PER_VOLT * MAX_CONTROL_VOLTAGE)
  83:main.c        **** 
  84:main.c        **** /* NotePerfect step size (in mV) */
  85:main.c        **** #define NOTEPERFECT_STEP_SIZE_MV    ((MAX_CONTROL_VOLTAGE * 1000) / NUMBER_NOTE_PERFECT_STEPS)
  86:main.c        **** 
  87:main.c        **** /* NotePerfect step number lookup table */
  88:main.c        **** uint16_t PWM_Lookup[] = {0, 83, 167, 250, 333, 417, 500, 583, 667, 750, 833, 917, 1000,
  89:main.c        ****                             1083, 1167, 1250, 1333, 1417, 1500, 1583, 1667, 1750, 1833, 1917, 2000,
  90:main.c        ****                             2083, 2167, 2250, 2333, 2417, 2500, 2583, 2667, 2750, 2833, 2917, 3000,
  91:main.c        ****                             3083, 3167, 3250, 3333, 3417, 3500, 3583, 3667, 3750, 3833, 3917, 4000,
  92:main.c        ****                             4083, 4167, 4250, 4333, 4417, 4500, 4583, 4667, 4750, 4833, 4917, 5000}
  93:main.c        **** 
  94:main.c        **** int main(void)
  95:main.c        **** {
 111              		.loc 1 95 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 568
 114              		@ frame_needed = 1, uses_anonymous_args = 0
 115 0000 80B5     		push	{r7, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 ADF50E7D 		sub	sp, sp, #568
 120              		.cfi_def_cfa_offset 576
 121 0006 00AF     		add	r7, sp, #0
 122              		.cfi_def_cfa_register 7
  96:main.c        ****     uint8 i;
  97:main.c        ****     
  98:main.c        ****     /* Array to store ADC count for moving average filter */
  99:main.c        ****     int32 adcCounts[MAX_SAMPLE] = {0};
 123              		.loc 1 99 0
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 5


 124 0008 07F11403 		add	r3, r7, #20
 125 000c 1846     		mov	r0, r3
 126 000e 4FF40073 		mov	r3, #512
 127 0012 1A46     		mov	r2, r3
 128 0014 0021     		movs	r1, #0
 129 0016 FFF7FEFF 		bl	memset
 100:main.c        ****     
 101:main.c        ****     /* Variable to hold ADC conversion result */
 102:main.c        ****     int32 result = 0;
 130              		.loc 1 102 0
 131 001a 0023     		movs	r3, #0
 132 001c C7F82032 		str	r3, [r7, #544]
 103:main.c        ****     
 104:main.c        ****     /* Variable to store accumulated sample for filter array */
 105:main.c        ****     int32 sum = 0;
 133              		.loc 1 105 0
 134 0020 0023     		movs	r3, #0
 135 0022 C7F83032 		str	r3, [r7, #560]
 106:main.c        ****     
 107:main.c        ****     /* Variable for testing sharp change in signal slope */
 108:main.c        ****     int16 diff = 0;
 136              		.loc 1 108 0
 137 0026 0023     		movs	r3, #0
 138 0028 A7F81E32 		strh	r3, [r7, #542]	@ movhi
 109:main.c        ****     
 110:main.c        ****     /* Variable to hold the result in milli volts converted from filtered 
 111:main.c        ****      * ADC counts */
 112:main.c        ****     int32 milliVolts = 0;
 139              		.loc 1 112 0
 140 002c 0023     		movs	r3, #0
 141 002e C7F81832 		str	r3, [r7, #536]
 113:main.c        **** 	
 114:main.c        ****     /* Variable to hold the moving average filtered value */
 115:main.c        ****     int32 averageCounts = 0;
 142              		.loc 1 115 0
 143 0032 0023     		movs	r3, #0
 144 0034 C7F82C32 		str	r3, [r7, #556]
 116:main.c        **** 	
 117:main.c        ****     /* Index variable to work on the filter array */
 118:main.c        ****     uint8 index = 0;
 145              		.loc 1 118 0
 146 0038 0023     		movs	r3, #0
 147 003a 87F82B32 		strb	r3, [r7, #555]
 119:main.c        ****     
 120:main.c        ****     /* Variables to calculate and hold NotePerfect DAC value */
 121:main.c        ****     uint32 notePerfectValue = 0;
 148              		.loc 1 121 0
 149 003e 0023     		movs	r3, #0
 150 0040 C7F82432 		str	r3, [r7, #548]
 122:main.c        ****     uint32 remainder = 0;
 151              		.loc 1 122 0
 152 0044 0023     		movs	r3, #0
 153 0046 C7F81432 		str	r3, [r7, #532]
 123:main.c        ****     
 124:main.c        ****     /* Character array to hold the micro volts*/
 125:main.c        ****     char displayStr[15] = {'\0'};        
 154              		.loc 1 125 0
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 6


 155 004a 3B1D     		adds	r3, r7, #4
 156 004c 1A46     		mov	r2, r3
 157 004e 0023     		movs	r3, #0
 158 0050 1360     		str	r3, [r2]
 159 0052 5360     		str	r3, [r2, #4]
 160 0054 9360     		str	r3, [r2, #8]
 161 0056 C2F80B30 		str	r3, [r2, #11]	@ unaligned
 126:main.c        **** 
 127:main.c        ****     CYGlobalIntEnable;
 162              		.loc 1 127 0
 163              		.syntax unified
 164              	@ 127 "main.c" 1
 165 005a 62B6     		CPSIE   i
 166              	@ 0 "" 2
 128:main.c        **** 
 129:main.c        ****     /* Start ADC and start conversion */
 130:main.c        ****     ADC_Start();
 167              		.loc 1 130 0
 168              		.thumb
 169              		.syntax unified
 170 005c FFF7FEFF 		bl	ADC_Start
 131:main.c        ****     ADC_StartConvert();
 171              		.loc 1 131 0
 172 0060 FFF7FEFF 		bl	ADC_StartConvert
 132:main.c        **** 
 133:main.c        ****     /* Start LCD and set position */
 134:main.c        ****     LCD_Start();
 173              		.loc 1 134 0
 174 0064 FFF7FEFF 		bl	LCD_Start
 135:main.c        ****     LCD_Position(0,0);
 175              		.loc 1 135 0
 176 0068 0021     		movs	r1, #0
 177 006a 0020     		movs	r0, #0
 178 006c FFF7FEFF 		bl	LCD_Position
 136:main.c        ****     LCD_PrintString("ADC    Step = ");
 179              		.loc 1 136 0
 180 0070 7E48     		ldr	r0, .L10
 181 0072 FFF7FEFF 		bl	LCD_PrintString
 137:main.c        **** 
 138:main.c        ****     /* Print mV unit on the LCD */
 139:main.c        ****     LCD_Position(1,4);
 182              		.loc 1 139 0
 183 0076 0421     		movs	r1, #4
 184 0078 0120     		movs	r0, #1
 185 007a FFF7FEFF 		bl	LCD_Position
 140:main.c        ****     LCD_PutChar('m');
 186              		.loc 1 140 0
 187 007e 6D20     		movs	r0, #109
 188 0080 FFF7FEFF 		bl	LCD_PutChar
 141:main.c        ****     LCD_PutChar('V');
 189              		.loc 1 141 0
 190 0084 5620     		movs	r0, #86
 191 0086 FFF7FEFF 		bl	LCD_PutChar
 142:main.c        ****     LCD_Position(1,7);
 192              		.loc 1 142 0
 193 008a 0721     		movs	r1, #7
 194 008c 0120     		movs	r0, #1
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 7


 195 008e FFF7FEFF 		bl	LCD_Position
 143:main.c        ****     LCD_PrintString("DAC =");
 196              		.loc 1 143 0
 197 0092 7748     		ldr	r0, .L10+4
 198 0094 FFF7FEFF 		bl	LCD_PrintString
 144:main.c        ****     
 145:main.c        ****     /* Read one sample from the ADC and initialize the filter */
 146:main.c        ****     ADC_IsEndConversion(ADC_WAIT_FOR_RESULT);
 199              		.loc 1 146 0
 200 0098 0020     		movs	r0, #0
 201 009a FFF7FEFF 		bl	ADC_IsEndConversion
 147:main.c        ****     result = ADC_GetResult32();
 202              		.loc 1 147 0
 203 009e FFF7FEFF 		bl	ADC_GetResult32
 204 00a2 C7F82002 		str	r0, [r7, #544]
 148:main.c        ****     
 149:main.c        ****     for(i = 0; i < MAX_SAMPLE; i++)
 205              		.loc 1 149 0
 206 00a6 0023     		movs	r3, #0
 207 00a8 87F83732 		strb	r3, [r7, #567]
 208 00ac 0CE0     		b	.L2
 209              	.L3:
 150:main.c        ****     {
 151:main.c        ****         adcCounts[i] = result;
 210              		.loc 1 151 0 discriminator 3
 211 00ae 97F83722 		ldrb	r2, [r7, #567]	@ zero_extendqisi2
 212 00b2 07F11403 		add	r3, r7, #20
 213 00b6 D7F82012 		ldr	r1, [r7, #544]
 214 00ba 43F82210 		str	r1, [r3, r2, lsl #2]
 149:main.c        ****     {
 215              		.loc 1 149 0 discriminator 3
 216 00be 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
 217 00c2 0133     		adds	r3, r3, #1
 218 00c4 87F83732 		strb	r3, [r7, #567]
 219              	.L2:
 149:main.c        ****     {
 220              		.loc 1 149 0 is_stmt 0 discriminator 1
 221 00c8 97F93732 		ldrsb	r3, [r7, #567]
 222 00cc 002B     		cmp	r3, #0
 223 00ce EEDA     		bge	.L3
 152:main.c        ****     }
 153:main.c        ****     
 154:main.c        ****     /* Store sum of 128 samples*/
 155:main.c        ****     sum = result << DIV;
 224              		.loc 1 155 0 is_stmt 1
 225 00d0 D7F82032 		ldr	r3, [r7, #544]
 226 00d4 DB01     		lsls	r3, r3, #7
 227 00d6 C7F83032 		str	r3, [r7, #560]
 156:main.c        ****     
 157:main.c        ****     /* Average count is equal to one single sample for first ADC reading */
 158:main.c        ****     averageCounts = result;
 228              		.loc 1 158 0
 229 00da D7F82032 		ldr	r3, [r7, #544]
 230 00de C7F82C32 		str	r3, [r7, #556]
 159:main.c        ****     
 160:main.c        ****     /* start Opamp and PWM */
 161:main.c        ****     Opamp_Start();
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 8


 231              		.loc 1 161 0
 232 00e2 FFF7FEFF 		bl	Opamp_Start
 162:main.c        ****     PWM_Start();
 233              		.loc 1 162 0
 234 00e6 FFF7FEFF 		bl	PWM_Start
 235              	.L9:
 163:main.c        ****     
 164:main.c        ****     while(1)
 165:main.c        ****     {
 166:main.c        ****         ADC_IsEndConversion(ADC_WAIT_FOR_RESULT);
 236              		.loc 1 166 0
 237 00ea 0020     		movs	r0, #0
 238 00ec FFF7FEFF 		bl	ADC_IsEndConversion
 167:main.c        ****         result = ADC_GetResult32();
 239              		.loc 1 167 0
 240 00f0 FFF7FEFF 		bl	ADC_GetResult32
 241 00f4 C7F82002 		str	r0, [r7, #544]
 168:main.c        ****         
 169:main.c        ****         diff = abs(averageCounts - result);
 242              		.loc 1 169 0
 243 00f8 D7F82C22 		ldr	r2, [r7, #556]
 244 00fc D7F82032 		ldr	r3, [r7, #544]
 245 0100 D31A     		subs	r3, r2, r3
 246 0102 002B     		cmp	r3, #0
 247 0104 B8BF     		it	lt
 248 0106 5B42     		rsblt	r3, r3, #0
 249 0108 A7F81E32 		strh	r3, [r7, #542]	@ movhi
 170:main.c        **** 
 171:main.c        ****         /* If sharp change in the signal then reset the filter with the new 
 172:main.c        ****          * signal value */
 173:main.c        ****         if(diff > SIGNAL_SLOPE)
 250              		.loc 1 173 0
 251 010c B7F91E32 		ldrsh	r3, [r7, #542]
 252 0110 B3F57A7F 		cmp	r3, #1000
 253 0114 21DD     		ble	.L4
 174:main.c        ****         {
 175:main.c        ****             for(i = 0; i < MAX_SAMPLE; i++)
 254              		.loc 1 175 0
 255 0116 0023     		movs	r3, #0
 256 0118 87F83732 		strb	r3, [r7, #567]
 257 011c 0CE0     		b	.L5
 258              	.L6:
 176:main.c        ****             {
 177:main.c        ****                 adcCounts[i] = result;
 259              		.loc 1 177 0 discriminator 3
 260 011e 97F83722 		ldrb	r2, [r7, #567]	@ zero_extendqisi2
 261 0122 07F11403 		add	r3, r7, #20
 262 0126 D7F82012 		ldr	r1, [r7, #544]
 263 012a 43F82210 		str	r1, [r3, r2, lsl #2]
 175:main.c        ****             {
 264              		.loc 1 175 0 discriminator 3
 265 012e 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
 266 0132 0133     		adds	r3, r3, #1
 267 0134 87F83732 		strb	r3, [r7, #567]
 268              	.L5:
 175:main.c        ****             {
 269              		.loc 1 175 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 9


 270 0138 97F93732 		ldrsb	r3, [r7, #567]
 271 013c 002B     		cmp	r3, #0
 272 013e EEDA     		bge	.L6
 178:main.c        ****             }
 179:main.c        ****             
 180:main.c        ****             /* Store sum of 128 samples*/
 181:main.c        ****             sum = result << DIV;
 273              		.loc 1 181 0 is_stmt 1
 274 0140 D7F82032 		ldr	r3, [r7, #544]
 275 0144 DB01     		lsls	r3, r3, #7
 276 0146 C7F83032 		str	r3, [r7, #560]
 182:main.c        ****     
 183:main.c        ****             /* Average count is equal to new sample */
 184:main.c        ****             averageCounts = result;
 277              		.loc 1 184 0
 278 014a D7F82032 		ldr	r3, [r7, #544]
 279 014e C7F82C32 		str	r3, [r7, #556]
 185:main.c        ****             index = 0;
 280              		.loc 1 185 0
 281 0152 0023     		movs	r3, #0
 282 0154 87F82B32 		strb	r3, [r7, #555]
 283 0158 2AE0     		b	.L7
 284              	.L4:
 186:main.c        ****         }
 187:main.c        ****         
 188:main.c        ****         /* Get moving average */
 189:main.c        ****         else
 190:main.c        ****         {
 191:main.c        ****             /* Remove the oldest element and add new sample to sum and get 
 192:main.c        ****              * the average */
 193:main.c        ****             sum = sum - adcCounts[index];
 285              		.loc 1 193 0
 286 015a 97F82B22 		ldrb	r2, [r7, #555]	@ zero_extendqisi2
 287 015e 07F11403 		add	r3, r7, #20
 288 0162 53F82230 		ldr	r3, [r3, r2, lsl #2]
 289 0166 D7F83022 		ldr	r2, [r7, #560]
 290 016a D31A     		subs	r3, r2, r3
 291 016c C7F83032 		str	r3, [r7, #560]
 194:main.c        ****             sum = sum + result;
 292              		.loc 1 194 0
 293 0170 D7F83022 		ldr	r2, [r7, #560]
 294 0174 D7F82032 		ldr	r3, [r7, #544]
 295 0178 1344     		add	r3, r3, r2
 296 017a C7F83032 		str	r3, [r7, #560]
 195:main.c        ****             averageCounts = sum >> DIV;
 297              		.loc 1 195 0
 298 017e D7F83032 		ldr	r3, [r7, #560]
 299 0182 DB11     		asrs	r3, r3, #7
 300 0184 C7F82C32 		str	r3, [r7, #556]
 196:main.c        ****             
 197:main.c        ****             /* Remove the oldest sample and store new sample */
 198:main.c        ****             adcCounts[index] = result;
 301              		.loc 1 198 0
 302 0188 97F82B22 		ldrb	r2, [r7, #555]	@ zero_extendqisi2
 303 018c 07F11403 		add	r3, r7, #20
 304 0190 D7F82012 		ldr	r1, [r7, #544]
 305 0194 43F82210 		str	r1, [r3, r2, lsl #2]
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 10


 199:main.c        ****             index++;
 306              		.loc 1 199 0
 307 0198 97F82B32 		ldrb	r3, [r7, #555]	@ zero_extendqisi2
 308 019c 0133     		adds	r3, r3, #1
 309 019e 87F82B32 		strb	r3, [r7, #555]
 200:main.c        ****             if (index == MAX_SAMPLE)
 310              		.loc 1 200 0
 311 01a2 97F82B32 		ldrb	r3, [r7, #555]	@ zero_extendqisi2
 312 01a6 802B     		cmp	r3, #128
 313 01a8 02D1     		bne	.L7
 201:main.c        ****             {
 202:main.c        ****                 index = 0;
 314              		.loc 1 202 0
 315 01aa 0023     		movs	r3, #0
 316 01ac 87F82B32 		strb	r3, [r7, #555]
 317              	.L7:
 203:main.c        ****             }
 204:main.c        ****         }
 205:main.c        ****         milliVolts = ADC_CountsTo_mVolts(averageCounts); /* convert ADC counts to milliVolts */
 318              		.loc 1 205 0
 319 01b0 D7F82C02 		ldr	r0, [r7, #556]
 320 01b4 FFF7FEFF 		bl	ADC_CountsTo_mVolts
 321 01b8 0346     		mov	r3, r0
 322 01ba C7F81832 		str	r3, [r7, #536]
 206:main.c        ****         
 207:main.c        ****         notePerfectValue = (milliVolts / NOTEPERFECT_STEP_SIZE_MV); /* calculate integer step numbe
 323              		.loc 1 207 0
 324 01be D7F81832 		ldr	r3, [r7, #536]
 325 01c2 2C4A     		ldr	r2, .L10+8
 326 01c4 A2FB0323 		umull	r2, r3, r2, r3
 327 01c8 1B09     		lsrs	r3, r3, #4
 328 01ca C7F82432 		str	r3, [r7, #548]
 208:main.c        ****         remainder = milliVolts % NOTEPERFECT_STEP_SIZE_MV; /* use modulo to get remainder */
 329              		.loc 1 208 0
 330 01ce D7F81832 		ldr	r3, [r7, #536]
 331 01d2 284A     		ldr	r2, .L10+8
 332 01d4 A2FB0312 		umull	r1, r2, r2, r3
 333 01d8 1209     		lsrs	r2, r2, #4
 334 01da 5321     		movs	r1, #83
 335 01dc 01FB02F2 		mul	r2, r1, r2
 336 01e0 9B1A     		subs	r3, r3, r2
 337 01e2 C7F81432 		str	r3, [r7, #532]
 209:main.c        ****         if(remainder >= NOTEPERFECT_STEP_SIZE_MV/2) /* determine if round-up is necessary */
 338              		.loc 1 209 0
 339 01e6 D7F81432 		ldr	r3, [r7, #532]
 340 01ea 282B     		cmp	r3, #40
 341 01ec 04D9     		bls	.L8
 210:main.c        ****             notePerfectValue += 1;
 342              		.loc 1 210 0
 343 01ee D7F82432 		ldr	r3, [r7, #548]
 344 01f2 0133     		adds	r3, r3, #1
 345 01f4 C7F82432 		str	r3, [r7, #548]
 346              	.L8:
 211:main.c        ****         PWM_WriteCompare(PWM_Lookup[notePerfectValue]); /* lookup PWM compare value and update PWM 
 347              		.loc 1 211 0
 348 01f8 1F4A     		ldr	r2, .L10+12
 349 01fa D7F82432 		ldr	r3, [r7, #548]
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 11


 350 01fe 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 351 0202 1846     		mov	r0, r3
 352 0204 FFF7FEFF 		bl	PWM_WriteCompare
 212:main.c        ****         sprintf(displayStr,"%4d", PWM_Lookup[notePerfectValue]);
 353              		.loc 1 212 0
 354 0208 1B4A     		ldr	r2, .L10+12
 355 020a D7F82432 		ldr	r3, [r7, #548]
 356 020e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 357 0212 1A46     		mov	r2, r3
 358 0214 3B1D     		adds	r3, r7, #4
 359 0216 1949     		ldr	r1, .L10+16
 360 0218 1846     		mov	r0, r3
 361 021a FFF7FEFF 		bl	sprintf
 213:main.c        ****         LCD_Position(1,12);
 362              		.loc 1 213 0
 363 021e 0C21     		movs	r1, #12
 364 0220 0120     		movs	r0, #1
 365 0222 FFF7FEFF 		bl	LCD_Position
 214:main.c        ****         LCD_PrintString(displayStr);
 366              		.loc 1 214 0
 367 0226 3B1D     		adds	r3, r7, #4
 368 0228 1846     		mov	r0, r3
 369 022a FFF7FEFF 		bl	LCD_PrintString
 215:main.c        ****             
 216:main.c        ****         /* Convert milli volts to string and display on the LCD */
 217:main.c        ****         sprintf(displayStr,"%4ld",milliVolts);
 370              		.loc 1 217 0
 371 022e 3B1D     		adds	r3, r7, #4
 372 0230 D7F81822 		ldr	r2, [r7, #536]
 373 0234 1249     		ldr	r1, .L10+20
 374 0236 1846     		mov	r0, r3
 375 0238 FFF7FEFF 		bl	sprintf
 218:main.c        ****         LCD_Position(1,0);
 376              		.loc 1 218 0
 377 023c 0021     		movs	r1, #0
 378 023e 0120     		movs	r0, #1
 379 0240 FFF7FEFF 		bl	LCD_Position
 219:main.c        ****         LCD_PrintString(displayStr);
 380              		.loc 1 219 0
 381 0244 3B1D     		adds	r3, r7, #4
 382 0246 1846     		mov	r0, r3
 383 0248 FFF7FEFF 		bl	LCD_PrintString
 220:main.c        ****         
 221:main.c        ****         /* Convert notePerfectValue to string and display on the LCD */
 222:main.c        ****         sprintf(displayStr,"%2ld", notePerfectValue);
 384              		.loc 1 222 0
 385 024c 3B1D     		adds	r3, r7, #4
 386 024e D7F82422 		ldr	r2, [r7, #548]
 387 0252 0C49     		ldr	r1, .L10+24
 388 0254 1846     		mov	r0, r3
 389 0256 FFF7FEFF 		bl	sprintf
 223:main.c        ****         LCD_Position(0,14);
 390              		.loc 1 223 0
 391 025a 0E21     		movs	r1, #14
 392 025c 0020     		movs	r0, #0
 393 025e FFF7FEFF 		bl	LCD_Position
 224:main.c        ****         LCD_PrintString(displayStr);
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 12


 394              		.loc 1 224 0
 395 0262 3B1D     		adds	r3, r7, #4
 396 0264 1846     		mov	r0, r3
 397 0266 FFF7FEFF 		bl	LCD_PrintString
 225:main.c        ****         
 226:main.c        ****     }	
 398              		.loc 1 226 0
 399 026a 3EE7     		b	.L9
 400              	.L11:
 401              		.align	2
 402              	.L10:
 403 026c 00000000 		.word	.LC0
 404 0270 10000000 		.word	.LC1
 405 0274 1F725931 		.word	827945503
 406 0278 00000000 		.word	PWM_Lookup
 407 027c 18000000 		.word	.LC2
 408 0280 1C000000 		.word	.LC3
 409 0284 24000000 		.word	.LC4
 410              		.cfi_endproc
 411              	.LFE64:
 412              		.size	main, .-main
 413              		.text
 414              	.Letext0:
 415              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 416              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 417              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 418              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 419              		.section	.debug_info,"",%progbits
 420              	.Ldebug_info0:
 421 0000 ED010000 		.4byte	0x1ed
 422 0004 0400     		.2byte	0x4
 423 0006 00000000 		.4byte	.Ldebug_abbrev0
 424 000a 04       		.byte	0x4
 425 000b 01       		.uleb128 0x1
 426 000c 6C000000 		.4byte	.LASF33
 427 0010 0C       		.byte	0xc
 428 0011 FA010000 		.4byte	.LASF34
 429 0015 0E000000 		.4byte	.LASF35
 430 0019 00000000 		.4byte	.Ldebug_ranges0+0
 431 001d 00000000 		.4byte	0
 432 0021 00000000 		.4byte	.Ldebug_line0
 433 0025 02       		.uleb128 0x2
 434 0026 01       		.byte	0x1
 435 0027 06       		.byte	0x6
 436 0028 49020000 		.4byte	.LASF0
 437 002c 02       		.uleb128 0x2
 438 002d 01       		.byte	0x1
 439 002e 08       		.byte	0x8
 440 002f 2A010000 		.4byte	.LASF1
 441 0033 02       		.uleb128 0x2
 442 0034 02       		.byte	0x2
 443 0035 05       		.byte	0x5
 444 0036 17020000 		.4byte	.LASF2
 445 003a 03       		.uleb128 0x3
 446 003b 78010000 		.4byte	.LASF4
 447 003f 02       		.byte	0x2
 448 0040 2B       		.byte	0x2b
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 13


 449 0041 45000000 		.4byte	0x45
 450 0045 02       		.uleb128 0x2
 451 0046 02       		.byte	0x2
 452 0047 07       		.byte	0x7
 453 0048 04010000 		.4byte	.LASF3
 454 004c 03       		.uleb128 0x3
 455 004d FA000000 		.4byte	.LASF5
 456 0051 02       		.byte	0x2
 457 0052 3F       		.byte	0x3f
 458 0053 57000000 		.4byte	0x57
 459 0057 02       		.uleb128 0x2
 460 0058 04       		.byte	0x4
 461 0059 05       		.byte	0x5
 462 005a 2A020000 		.4byte	.LASF6
 463 005e 02       		.uleb128 0x2
 464 005f 04       		.byte	0x4
 465 0060 07       		.byte	0x7
 466 0061 83010000 		.4byte	.LASF7
 467 0065 02       		.uleb128 0x2
 468 0066 08       		.byte	0x8
 469 0067 05       		.byte	0x5
 470 0068 EC010000 		.4byte	.LASF8
 471 006c 02       		.uleb128 0x2
 472 006d 08       		.byte	0x8
 473 006e 07       		.byte	0x7
 474 006f B8010000 		.4byte	.LASF9
 475 0073 04       		.uleb128 0x4
 476 0074 04       		.byte	0x4
 477 0075 05       		.byte	0x5
 478 0076 696E7400 		.ascii	"int\000"
 479 007a 02       		.uleb128 0x2
 480 007b 04       		.byte	0x4
 481 007c 07       		.byte	0x7
 482 007d AB010000 		.4byte	.LASF10
 483 0081 03       		.uleb128 0x3
 484 0082 21020000 		.4byte	.LASF11
 485 0086 03       		.byte	0x3
 486 0087 24       		.byte	0x24
 487 0088 3A000000 		.4byte	0x3a
 488 008c 03       		.uleb128 0x3
 489 008d D6010000 		.4byte	.LASF12
 490 0091 03       		.byte	0x3
 491 0092 2C       		.byte	0x2c
 492 0093 4C000000 		.4byte	0x4c
 493 0097 05       		.uleb128 0x5
 494 0098 24010000 		.4byte	.LASF13
 495 009c 04       		.byte	0x4
 496 009d E701     		.2byte	0x1e7
 497 009f 2C000000 		.4byte	0x2c
 498 00a3 05       		.uleb128 0x5
 499 00a4 A4010000 		.4byte	.LASF14
 500 00a8 04       		.byte	0x4
 501 00a9 E901     		.2byte	0x1e9
 502 00ab 5E000000 		.4byte	0x5e
 503 00af 05       		.uleb128 0x5
 504 00b0 43010000 		.4byte	.LASF15
 505 00b4 04       		.byte	0x4
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 14


 506 00b5 EB01     		.2byte	0x1eb
 507 00b7 33000000 		.4byte	0x33
 508 00bb 05       		.uleb128 0x5
 509 00bc 5A010000 		.4byte	.LASF16
 510 00c0 04       		.byte	0x4
 511 00c1 EC01     		.2byte	0x1ec
 512 00c3 57000000 		.4byte	0x57
 513 00c7 02       		.uleb128 0x2
 514 00c8 04       		.byte	0x4
 515 00c9 04       		.byte	0x4
 516 00ca 1E010000 		.4byte	.LASF17
 517 00ce 02       		.uleb128 0x2
 518 00cf 08       		.byte	0x8
 519 00d0 04       		.byte	0x4
 520 00d1 17010000 		.4byte	.LASF18
 521 00d5 02       		.uleb128 0x2
 522 00d6 01       		.byte	0x1
 523 00d7 08       		.byte	0x8
 524 00d8 01020000 		.4byte	.LASF19
 525 00dc 02       		.uleb128 0x2
 526 00dd 08       		.byte	0x8
 527 00de 04       		.byte	0x4
 528 00df 3D020000 		.4byte	.LASF20
 529 00e3 02       		.uleb128 0x2
 530 00e4 04       		.byte	0x4
 531 00e5 07       		.byte	0x7
 532 00e6 DE010000 		.4byte	.LASF21
 533 00ea 06       		.uleb128 0x6
 534 00eb 95010000 		.4byte	.LASF36
 535 00ef 01       		.byte	0x1
 536 00f0 5E       		.byte	0x5e
 537 00f1 73000000 		.4byte	0x73
 538 00f5 00000000 		.4byte	.LFB64
 539 00f9 88020000 		.4byte	.LFE64-.LFB64
 540 00fd 01       		.uleb128 0x1
 541 00fe 9C       		.byte	0x9c
 542 00ff 9E010000 		.4byte	0x19e
 543 0103 07       		.uleb128 0x7
 544 0104 6900     		.ascii	"i\000"
 545 0106 01       		.byte	0x1
 546 0107 60       		.byte	0x60
 547 0108 97000000 		.4byte	0x97
 548 010c 02       		.uleb128 0x2
 549 010d 91       		.byte	0x91
 550 010e 77       		.sleb128 -9
 551 010f 08       		.uleb128 0x8
 552 0110 9A010000 		.4byte	.LASF22
 553 0114 01       		.byte	0x1
 554 0115 63       		.byte	0x63
 555 0116 9E010000 		.4byte	0x19e
 556 011a 03       		.uleb128 0x3
 557 011b 91       		.byte	0x91
 558 011c D47B     		.sleb128 -556
 559 011e 08       		.uleb128 0x8
 560 011f CF010000 		.4byte	.LASF23
 561 0123 01       		.byte	0x1
 562 0124 66       		.byte	0x66
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 15


 563 0125 BB000000 		.4byte	0xbb
 564 0129 02       		.uleb128 0x2
 565 012a 91       		.byte	0x91
 566 012b 60       		.sleb128 -32
 567 012c 07       		.uleb128 0x7
 568 012d 73756D00 		.ascii	"sum\000"
 569 0131 01       		.byte	0x1
 570 0132 69       		.byte	0x69
 571 0133 BB000000 		.4byte	0xbb
 572 0137 02       		.uleb128 0x2
 573 0138 91       		.byte	0x91
 574 0139 70       		.sleb128 -16
 575 013a 08       		.uleb128 0x8
 576 013b E7010000 		.4byte	.LASF24
 577 013f 01       		.byte	0x1
 578 0140 6C       		.byte	0x6c
 579 0141 AF000000 		.4byte	0xaf
 580 0145 02       		.uleb128 0x2
 581 0146 91       		.byte	0x91
 582 0147 5E       		.sleb128 -34
 583 0148 08       		.uleb128 0x8
 584 0149 6D010000 		.4byte	.LASF25
 585 014d 01       		.byte	0x1
 586 014e 70       		.byte	0x70
 587 014f BB000000 		.4byte	0xbb
 588 0153 02       		.uleb128 0x2
 589 0154 91       		.byte	0x91
 590 0155 58       		.sleb128 -40
 591 0156 08       		.uleb128 0x8
 592 0157 00000000 		.4byte	.LASF26
 593 015b 01       		.byte	0x1
 594 015c 73       		.byte	0x73
 595 015d BB000000 		.4byte	0xbb
 596 0161 02       		.uleb128 0x2
 597 0162 91       		.byte	0x91
 598 0163 6C       		.sleb128 -20
 599 0164 08       		.uleb128 0x8
 600 0165 06020000 		.4byte	.LASF27
 601 0169 01       		.byte	0x1
 602 016a 76       		.byte	0x76
 603 016b 97000000 		.4byte	0x97
 604 016f 02       		.uleb128 0x2
 605 0170 91       		.byte	0x91
 606 0171 6B       		.sleb128 -21
 607 0172 08       		.uleb128 0x8
 608 0173 49010000 		.4byte	.LASF28
 609 0177 01       		.byte	0x1
 610 0178 79       		.byte	0x79
 611 0179 A3000000 		.4byte	0xa3
 612 017d 02       		.uleb128 0x2
 613 017e 91       		.byte	0x91
 614 017f 64       		.sleb128 -28
 615 0180 08       		.uleb128 0x8
 616 0181 33020000 		.4byte	.LASF29
 617 0185 01       		.byte	0x1
 618 0186 7A       		.byte	0x7a
 619 0187 A3000000 		.4byte	0xa3
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 16


 620 018b 02       		.uleb128 0x2
 621 018c 91       		.byte	0x91
 622 018d 54       		.sleb128 -44
 623 018e 08       		.uleb128 0x8
 624 018f 0C020000 		.4byte	.LASF30
 625 0193 01       		.byte	0x1
 626 0194 7D       		.byte	0x7d
 627 0195 AE010000 		.4byte	0x1ae
 628 0199 03       		.uleb128 0x3
 629 019a 91       		.byte	0x91
 630 019b C47B     		.sleb128 -572
 631 019d 00       		.byte	0
 632 019e 09       		.uleb128 0x9
 633 019f BB000000 		.4byte	0xbb
 634 01a3 AE010000 		.4byte	0x1ae
 635 01a7 0A       		.uleb128 0xa
 636 01a8 E3000000 		.4byte	0xe3
 637 01ac 7F       		.byte	0x7f
 638 01ad 00       		.byte	0
 639 01ae 09       		.uleb128 0x9
 640 01af D5000000 		.4byte	0xd5
 641 01b3 BE010000 		.4byte	0x1be
 642 01b7 0A       		.uleb128 0xa
 643 01b8 E3000000 		.4byte	0xe3
 644 01bc 0E       		.byte	0xe
 645 01bd 00       		.byte	0
 646 01be 0B       		.uleb128 0xb
 647 01bf 60010000 		.4byte	.LASF31
 648 01c3 05       		.byte	0x5
 649 01c4 1207     		.2byte	0x712
 650 01c6 CA010000 		.4byte	0x1ca
 651 01ca 0C       		.uleb128 0xc
 652 01cb 8C000000 		.4byte	0x8c
 653 01cf 09       		.uleb128 0x9
 654 01d0 81000000 		.4byte	0x81
 655 01d4 DF010000 		.4byte	0x1df
 656 01d8 0A       		.uleb128 0xa
 657 01d9 E3000000 		.4byte	0xe3
 658 01dd 3C       		.byte	0x3c
 659 01de 00       		.byte	0
 660 01df 0D       		.uleb128 0xd
 661 01e0 38010000 		.4byte	.LASF32
 662 01e4 01       		.byte	0x1
 663 01e5 58       		.byte	0x58
 664 01e6 CF010000 		.4byte	0x1cf
 665 01ea 05       		.uleb128 0x5
 666 01eb 03       		.byte	0x3
 667 01ec 00000000 		.4byte	PWM_Lookup
 668 01f0 00       		.byte	0
 669              		.section	.debug_abbrev,"",%progbits
 670              	.Ldebug_abbrev0:
 671 0000 01       		.uleb128 0x1
 672 0001 11       		.uleb128 0x11
 673 0002 01       		.byte	0x1
 674 0003 25       		.uleb128 0x25
 675 0004 0E       		.uleb128 0xe
 676 0005 13       		.uleb128 0x13
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 17


 677 0006 0B       		.uleb128 0xb
 678 0007 03       		.uleb128 0x3
 679 0008 0E       		.uleb128 0xe
 680 0009 1B       		.uleb128 0x1b
 681 000a 0E       		.uleb128 0xe
 682 000b 55       		.uleb128 0x55
 683 000c 17       		.uleb128 0x17
 684 000d 11       		.uleb128 0x11
 685 000e 01       		.uleb128 0x1
 686 000f 10       		.uleb128 0x10
 687 0010 17       		.uleb128 0x17
 688 0011 00       		.byte	0
 689 0012 00       		.byte	0
 690 0013 02       		.uleb128 0x2
 691 0014 24       		.uleb128 0x24
 692 0015 00       		.byte	0
 693 0016 0B       		.uleb128 0xb
 694 0017 0B       		.uleb128 0xb
 695 0018 3E       		.uleb128 0x3e
 696 0019 0B       		.uleb128 0xb
 697 001a 03       		.uleb128 0x3
 698 001b 0E       		.uleb128 0xe
 699 001c 00       		.byte	0
 700 001d 00       		.byte	0
 701 001e 03       		.uleb128 0x3
 702 001f 16       		.uleb128 0x16
 703 0020 00       		.byte	0
 704 0021 03       		.uleb128 0x3
 705 0022 0E       		.uleb128 0xe
 706 0023 3A       		.uleb128 0x3a
 707 0024 0B       		.uleb128 0xb
 708 0025 3B       		.uleb128 0x3b
 709 0026 0B       		.uleb128 0xb
 710 0027 49       		.uleb128 0x49
 711 0028 13       		.uleb128 0x13
 712 0029 00       		.byte	0
 713 002a 00       		.byte	0
 714 002b 04       		.uleb128 0x4
 715 002c 24       		.uleb128 0x24
 716 002d 00       		.byte	0
 717 002e 0B       		.uleb128 0xb
 718 002f 0B       		.uleb128 0xb
 719 0030 3E       		.uleb128 0x3e
 720 0031 0B       		.uleb128 0xb
 721 0032 03       		.uleb128 0x3
 722 0033 08       		.uleb128 0x8
 723 0034 00       		.byte	0
 724 0035 00       		.byte	0
 725 0036 05       		.uleb128 0x5
 726 0037 16       		.uleb128 0x16
 727 0038 00       		.byte	0
 728 0039 03       		.uleb128 0x3
 729 003a 0E       		.uleb128 0xe
 730 003b 3A       		.uleb128 0x3a
 731 003c 0B       		.uleb128 0xb
 732 003d 3B       		.uleb128 0x3b
 733 003e 05       		.uleb128 0x5
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 18


 734 003f 49       		.uleb128 0x49
 735 0040 13       		.uleb128 0x13
 736 0041 00       		.byte	0
 737 0042 00       		.byte	0
 738 0043 06       		.uleb128 0x6
 739 0044 2E       		.uleb128 0x2e
 740 0045 01       		.byte	0x1
 741 0046 3F       		.uleb128 0x3f
 742 0047 19       		.uleb128 0x19
 743 0048 03       		.uleb128 0x3
 744 0049 0E       		.uleb128 0xe
 745 004a 3A       		.uleb128 0x3a
 746 004b 0B       		.uleb128 0xb
 747 004c 3B       		.uleb128 0x3b
 748 004d 0B       		.uleb128 0xb
 749 004e 27       		.uleb128 0x27
 750 004f 19       		.uleb128 0x19
 751 0050 49       		.uleb128 0x49
 752 0051 13       		.uleb128 0x13
 753 0052 11       		.uleb128 0x11
 754 0053 01       		.uleb128 0x1
 755 0054 12       		.uleb128 0x12
 756 0055 06       		.uleb128 0x6
 757 0056 40       		.uleb128 0x40
 758 0057 18       		.uleb128 0x18
 759 0058 9642     		.uleb128 0x2116
 760 005a 19       		.uleb128 0x19
 761 005b 01       		.uleb128 0x1
 762 005c 13       		.uleb128 0x13
 763 005d 00       		.byte	0
 764 005e 00       		.byte	0
 765 005f 07       		.uleb128 0x7
 766 0060 34       		.uleb128 0x34
 767 0061 00       		.byte	0
 768 0062 03       		.uleb128 0x3
 769 0063 08       		.uleb128 0x8
 770 0064 3A       		.uleb128 0x3a
 771 0065 0B       		.uleb128 0xb
 772 0066 3B       		.uleb128 0x3b
 773 0067 0B       		.uleb128 0xb
 774 0068 49       		.uleb128 0x49
 775 0069 13       		.uleb128 0x13
 776 006a 02       		.uleb128 0x2
 777 006b 18       		.uleb128 0x18
 778 006c 00       		.byte	0
 779 006d 00       		.byte	0
 780 006e 08       		.uleb128 0x8
 781 006f 34       		.uleb128 0x34
 782 0070 00       		.byte	0
 783 0071 03       		.uleb128 0x3
 784 0072 0E       		.uleb128 0xe
 785 0073 3A       		.uleb128 0x3a
 786 0074 0B       		.uleb128 0xb
 787 0075 3B       		.uleb128 0x3b
 788 0076 0B       		.uleb128 0xb
 789 0077 49       		.uleb128 0x49
 790 0078 13       		.uleb128 0x13
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 19


 791 0079 02       		.uleb128 0x2
 792 007a 18       		.uleb128 0x18
 793 007b 00       		.byte	0
 794 007c 00       		.byte	0
 795 007d 09       		.uleb128 0x9
 796 007e 01       		.uleb128 0x1
 797 007f 01       		.byte	0x1
 798 0080 49       		.uleb128 0x49
 799 0081 13       		.uleb128 0x13
 800 0082 01       		.uleb128 0x1
 801 0083 13       		.uleb128 0x13
 802 0084 00       		.byte	0
 803 0085 00       		.byte	0
 804 0086 0A       		.uleb128 0xa
 805 0087 21       		.uleb128 0x21
 806 0088 00       		.byte	0
 807 0089 49       		.uleb128 0x49
 808 008a 13       		.uleb128 0x13
 809 008b 2F       		.uleb128 0x2f
 810 008c 0B       		.uleb128 0xb
 811 008d 00       		.byte	0
 812 008e 00       		.byte	0
 813 008f 0B       		.uleb128 0xb
 814 0090 34       		.uleb128 0x34
 815 0091 00       		.byte	0
 816 0092 03       		.uleb128 0x3
 817 0093 0E       		.uleb128 0xe
 818 0094 3A       		.uleb128 0x3a
 819 0095 0B       		.uleb128 0xb
 820 0096 3B       		.uleb128 0x3b
 821 0097 05       		.uleb128 0x5
 822 0098 49       		.uleb128 0x49
 823 0099 13       		.uleb128 0x13
 824 009a 3F       		.uleb128 0x3f
 825 009b 19       		.uleb128 0x19
 826 009c 3C       		.uleb128 0x3c
 827 009d 19       		.uleb128 0x19
 828 009e 00       		.byte	0
 829 009f 00       		.byte	0
 830 00a0 0C       		.uleb128 0xc
 831 00a1 35       		.uleb128 0x35
 832 00a2 00       		.byte	0
 833 00a3 49       		.uleb128 0x49
 834 00a4 13       		.uleb128 0x13
 835 00a5 00       		.byte	0
 836 00a6 00       		.byte	0
 837 00a7 0D       		.uleb128 0xd
 838 00a8 34       		.uleb128 0x34
 839 00a9 00       		.byte	0
 840 00aa 03       		.uleb128 0x3
 841 00ab 0E       		.uleb128 0xe
 842 00ac 3A       		.uleb128 0x3a
 843 00ad 0B       		.uleb128 0xb
 844 00ae 3B       		.uleb128 0x3b
 845 00af 0B       		.uleb128 0xb
 846 00b0 49       		.uleb128 0x49
 847 00b1 13       		.uleb128 0x13
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 20


 848 00b2 3F       		.uleb128 0x3f
 849 00b3 19       		.uleb128 0x19
 850 00b4 02       		.uleb128 0x2
 851 00b5 18       		.uleb128 0x18
 852 00b6 00       		.byte	0
 853 00b7 00       		.byte	0
 854 00b8 00       		.byte	0
 855              		.section	.debug_aranges,"",%progbits
 856 0000 1C000000 		.4byte	0x1c
 857 0004 0200     		.2byte	0x2
 858 0006 00000000 		.4byte	.Ldebug_info0
 859 000a 04       		.byte	0x4
 860 000b 00       		.byte	0
 861 000c 0000     		.2byte	0
 862 000e 0000     		.2byte	0
 863 0010 00000000 		.4byte	.LFB64
 864 0014 88020000 		.4byte	.LFE64-.LFB64
 865 0018 00000000 		.4byte	0
 866 001c 00000000 		.4byte	0
 867              		.section	.debug_ranges,"",%progbits
 868              	.Ldebug_ranges0:
 869 0000 00000000 		.4byte	.LFB64
 870 0004 88020000 		.4byte	.LFE64
 871 0008 00000000 		.4byte	0
 872 000c 00000000 		.4byte	0
 873              		.section	.debug_line,"",%progbits
 874              	.Ldebug_line0:
 875 0000 BF010000 		.section	.debug_str,"MS",%progbits,1
 875      02004C01 
 875      00000201 
 875      FB0E0D00 
 875      01010101 
 876              	.LASF26:
 877 0000 61766572 		.ascii	"averageCounts\000"
 877      61676543 
 877      6F756E74 
 877      7300
 878              	.LASF35:
 879 000e 433A5C55 		.ascii	"C:\\Users\\David\\Documents\\Technical Topics\\PSoC"
 879      73657273 
 879      5C446176 
 879      69645C44 
 879      6F63756D 
 880 003c 20437265 		.ascii	" Creator Projects\\NotePerfect\\NotePerfect.cydsn\000"
 880      61746F72 
 880      2050726F 
 880      6A656374 
 880      735C4E6F 
 881              	.LASF33:
 882 006c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 882      43313120 
 882      352E342E 
 882      31203230 
 882      31363036 
 883 009f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 883      20726576 
 883      6973696F 
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 21


 883      6E203233 
 883      37373135 
 884 00d2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 884      66756E63 
 884      74696F6E 
 884      2D736563 
 884      74696F6E 
 885              	.LASF5:
 886 00fa 5F5F696E 		.ascii	"__int32_t\000"
 886      7433325F 
 886      7400
 887              	.LASF3:
 888 0104 73686F72 		.ascii	"short unsigned int\000"
 888      7420756E 
 888      7369676E 
 888      65642069 
 888      6E7400
 889              	.LASF18:
 890 0117 646F7562 		.ascii	"double\000"
 890      6C6500
 891              	.LASF17:
 892 011e 666C6F61 		.ascii	"float\000"
 892      7400
 893              	.LASF13:
 894 0124 75696E74 		.ascii	"uint8\000"
 894      3800
 895              	.LASF1:
 896 012a 756E7369 		.ascii	"unsigned char\000"
 896      676E6564 
 896      20636861 
 896      7200
 897              	.LASF32:
 898 0138 50574D5F 		.ascii	"PWM_Lookup\000"
 898      4C6F6F6B 
 898      757000
 899              	.LASF15:
 900 0143 696E7431 		.ascii	"int16\000"
 900      3600
 901              	.LASF28:
 902 0149 6E6F7465 		.ascii	"notePerfectValue\000"
 902      50657266 
 902      65637456 
 902      616C7565 
 902      00
 903              	.LASF16:
 904 015a 696E7433 		.ascii	"int32\000"
 904      3200
 905              	.LASF31:
 906 0160 49544D5F 		.ascii	"ITM_RxBuffer\000"
 906      52784275 
 906      66666572 
 906      00
 907              	.LASF25:
 908 016d 6D696C6C 		.ascii	"milliVolts\000"
 908      69566F6C 
 908      747300
 909              	.LASF4:
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 22


 910 0178 5F5F7569 		.ascii	"__uint16_t\000"
 910      6E743136 
 910      5F7400
 911              	.LASF7:
 912 0183 6C6F6E67 		.ascii	"long unsigned int\000"
 912      20756E73 
 912      69676E65 
 912      6420696E 
 912      7400
 913              	.LASF36:
 914 0195 6D61696E 		.ascii	"main\000"
 914      00
 915              	.LASF22:
 916 019a 61646343 		.ascii	"adcCounts\000"
 916      6F756E74 
 916      7300
 917              	.LASF14:
 918 01a4 75696E74 		.ascii	"uint32\000"
 918      333200
 919              	.LASF10:
 920 01ab 756E7369 		.ascii	"unsigned int\000"
 920      676E6564 
 920      20696E74 
 920      00
 921              	.LASF9:
 922 01b8 6C6F6E67 		.ascii	"long long unsigned int\000"
 922      206C6F6E 
 922      6720756E 
 922      7369676E 
 922      65642069 
 923              	.LASF23:
 924 01cf 72657375 		.ascii	"result\000"
 924      6C7400
 925              	.LASF12:
 926 01d6 696E7433 		.ascii	"int32_t\000"
 926      325F7400 
 927              	.LASF21:
 928 01de 73697A65 		.ascii	"sizetype\000"
 928      74797065 
 928      00
 929              	.LASF24:
 930 01e7 64696666 		.ascii	"diff\000"
 930      00
 931              	.LASF8:
 932 01ec 6C6F6E67 		.ascii	"long long int\000"
 932      206C6F6E 
 932      6720696E 
 932      7400
 933              	.LASF34:
 934 01fa 6D61696E 		.ascii	"main.c\000"
 934      2E6300
 935              	.LASF19:
 936 0201 63686172 		.ascii	"char\000"
 936      00
 937              	.LASF27:
 938 0206 696E6465 		.ascii	"index\000"
 938      7800
ARM GAS  C:\Users\David\AppData\Local\Temp\cc67Y03V.s 			page 23


 939              	.LASF30:
 940 020c 64697370 		.ascii	"displayStr\000"
 940      6C617953 
 940      747200
 941              	.LASF2:
 942 0217 73686F72 		.ascii	"short int\000"
 942      7420696E 
 942      7400
 943              	.LASF11:
 944 0221 75696E74 		.ascii	"uint16_t\000"
 944      31365F74 
 944      00
 945              	.LASF6:
 946 022a 6C6F6E67 		.ascii	"long int\000"
 946      20696E74 
 946      00
 947              	.LASF29:
 948 0233 72656D61 		.ascii	"remainder\000"
 948      696E6465 
 948      7200
 949              	.LASF20:
 950 023d 6C6F6E67 		.ascii	"long double\000"
 950      20646F75 
 950      626C6500 
 951              	.LASF0:
 952 0249 7369676E 		.ascii	"signed char\000"
 952      65642063 
 952      68617200 
 953              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
